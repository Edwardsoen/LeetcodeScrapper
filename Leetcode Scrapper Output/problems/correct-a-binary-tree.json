{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Google"]]}], "problem": "<p>You have a binary tree with a small defect. There is <strong>exactly one</strong> invalid node where its right child incorrectly points to another node at the <strong>same depth</strong> but to the <b>invalid node's right</b>.</p>\n\n<p>Given the root of the binary tree with this defect, <code>root</code>, return <em>the root of the binary tree after <strong>removing</strong> this invalid node <strong>and every node underneath it</strong> (minus the node it incorrectly points to).</em></p>\n\n<p><strong>Custom testing:</strong></p>\n\n<p>The test input is read as 3 lines:</p>\n\n<ul>\n\t<li><code>TreeNode root</code></li>\n\t<li><code>int fromNode</code> (<strong>not available to </strong><code>correctBinaryTree</code>)</li>\n\t<li><code>int toNode</code> (<strong>not available to </strong><code>correctBinaryTree</code>)</li>\n</ul>\n\n<p>After the binary tree rooted at <code>root</code> is parsed, the <code>TreeNode</code> with value of <code>fromNode</code> will have its right child pointer pointing to the <code>TreeNode</code> with a value of <code>toNode</code>. Then, <code>root</code> is passed to <code>correctBinaryTree</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/22/ex1v2.png\" style=\"width: 250px; height: 177px;\"></strong></p>\n\n<pre><strong>Input:</strong> root = [1,2,3], fromNode = 2, toNode = 3\n<strong>Output:</strong> [1,null,3]\n<strong>Explanation:</strong> The node with value 2 is invalid, so remove it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/22/ex2v3.png\" style=\"width: 350px; height: 255px;\"></strong></p>\n\n<pre><strong>Input:</strong> root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4\n<strong>Output:</strong> [8,3,1,null,null,9,4,null,null,5,6]\n<strong>Explanation:</strong> The node with value 7 is invalid, so remove it and the node underneath it, node 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[3, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>fromNode != toNode</code></li>\n\t<li><code>fromNode</code> and <code>toNode</code> will exist in the tree and will be on the same depth.</li>\n\t<li><code>toNode</code> is to the <strong>right</strong> of <code>fromNode</code>.</li>\n\t<li><code>fromNode.right</code> is <code>null</code> in the initial tree from the test data.</li>\n</ul>", "relatedTopics": ["Hash Table", "Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"], "similarQuestions": [{"questionName": "Flatten Binary Tree to Linked List", "difficulty": "Medium"}, {"questionName": "Flatten a Multilevel Doubly Linked List", "difficulty": "Medium"}], "problemName": "correct-a-binary-tree"}