{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Netflix\n8"], ["0 - 6 months", "Bloomberg\n4"], ["0 - 6 months", "Google\n3"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Uber\n9"], ["6 months - 1 year", "Facebook\n6"], ["6 months - 1 year", "Amazon\n5"], ["6 months - 1 year", "Twitter\n4"], ["6 months - 1 year", "JPMorgan\n3"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Media.net\n16"], ["1 year - 2 years", "Microsoft\n8"], ["1 year - 2 years", "Expedia\n5"], ["1 year - 2 years", "Snapchat\n4"], ["1 year - 2 years", "Qualtrics\n4"], ["1 year - 2 years", "Walmart Global Tech\n4"], ["1 year - 2 years", "Directi\n4"], ["1 year - 2 years", "Intuit\n3"], ["1 year - 2 years", "Twilio\n3"], ["1 year - 2 years", "Apple\n3"], ["1 year - 2 years", "DoorDash\n3"], ["1 year - 2 years", "eBay\n2"], ["1 year - 2 years", "Oracle\n2"], ["1 year - 2 years", "Citadel\n2"]]}], "problem": "<p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p>\n\n<p>All of the tickets belong to a man who departs from <code>\"JFK\"</code>, thus, the itinerary must begin with <code>\"JFK\"</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p>\n\n<ul>\n\t<li>For example, the itinerary <code>[\"JFK\", \"LGA\"]</code> has a smaller lexical order than <code>[\"JFK\", \"LGB\"]</code>.</li>\n</ul>\n\n<p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg\" style=\"width: 382px; height: 222px;\">\n<pre><strong>Input:</strong> tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n<strong>Output:</strong> [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg\" style=\"width: 222px; height: 230px;\">\n<pre><strong>Input:</strong> tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n<strong>Output:</strong> [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n<strong>Explanation:</strong> Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tickets.length &lt;= 300</code></li>\n\t<li><code>tickets[i].length == 2</code></li>\n\t<li><code>from<sub>i</sub>.length == 3</code></li>\n\t<li><code>to<sub>i</sub>.length == 3</code></li>\n\t<li><code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> consist of uppercase English letters.</li>\n\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\n</ul>\n", "relatedTopics": ["Depth-First Search", "Graph", "Eulerian Circuit"], "similarQuestions": [{"questionName": "Longest Common Subpath", "difficulty": "Hard"}, {"questionName": "Valid Arrangement of Pairs", "difficulty": "Hard"}], "problemName": "reconstruct-itinerary"}