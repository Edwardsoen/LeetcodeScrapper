{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "LinkedIn\n4"], ["0 - 6 months", "Bloomberg\n3"], ["0 - 6 months", "Amazon\n2"], ["0 - 6 months", "Apple\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Lyft\n4"], ["6 months - 1 year", "Yandex\n3"], ["6 months - 1 year", "Facebook\n2"], ["6 months - 1 year", "VMware\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Microsoft\n14"], ["1 year - 2 years", "Twitter\n2"], ["1 year - 2 years", "Goldman Sachs\n2"]]}], "problem": "<p>Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.</p>\n\n<p>Implement the <code>MaxStack</code> class:</p>\n\n<ul>\n\t<li><code>MaxStack()</code> Initializes the stack object.</li>\n\t<li><code>void push(int x)</code> Pushes element <code>x</code> onto the stack.</li>\n\t<li><code>int pop()</code> Removes the element on top of the stack and returns it.</li>\n\t<li><code>int top()</code> Gets the element on the top of the stack without removing it.</li>\n\t<li><code>int peekMax()</code> Retrieves the maximum element in the stack without removing it.</li>\n\t<li><code>int popMax()</code> Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the <strong>top-most</strong> one.</li>\n</ul>\n\n<p>You must come up with a solution that supports <code>O(1)</code> for each <code>top</code> call and <code>O(logn)</code> for each other call.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"MaxStack\", \"push\", \"push\", \"push\", \"top\", \"popMax\", \"top\", \"peekMax\", \"pop\", \"top\"]\n[[], [5], [1], [5], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, null, null, null, 5, 5, 1, 5, 1, 5]\n\n<strong>Explanation</strong>\nMaxStack stk = new MaxStack();\nstk.push(5);   // [<strong><u>5</u></strong>] the top of the stack and the maximum number is 5.\nstk.push(1);   // [<u>5</u>, <strong>1</strong>] the top of the stack is 1, but the maximum is 5.\nstk.push(5);   // [5, 1, <strong><u>5</u></strong>] the top of the stack is 5, which is also the maximum, because it is the top most one.\nstk.top();     // return 5, [5, 1, <strong><u>5</u></strong>] the stack did not change.\nstk.popMax();  // return 5, [<u>5</u>, <strong>1</strong>] the stack is changed now, and the top is different from the max.\nstk.top();     // return 1, [<u>5</u>, <strong>1</strong>] the stack did not change.\nstk.peekMax(); // return 5, [<u>5</u>, <strong>1</strong>] the stack did not change.\nstk.pop();     // return 1, [<strong><u>5</u></strong>] the top of the stack and the max element is now 5.\nstk.top();     // return 5, [<strong><u>5</u></strong>] the stack did not change.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>7</sup> &lt;= x &lt;= 10<sup>7</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, <code>peekMax</code>, and <code>popMax</code>.</li>\n\t<li>There will be <strong>at least one element</strong> in the stack when <code>pop</code>, <code>top</code>, <code>peekMax</code>, or <code>popMax</code> is called.</li>\n</ul>\n", "relatedTopics": ["Linked List", "Stack", "Design", "Doubly-Linked List", "Ordered Set"], "similarQuestions": [{"questionName": "Min Stack", "difficulty": "Medium"}], "problemName": "max-stack"}