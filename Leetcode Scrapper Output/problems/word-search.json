{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n17"], ["0 - 6 months", "Bloomberg\n16"], ["0 - 6 months", "Cisco\n8"], ["0 - 6 months", "Uber\n7"], ["0 - 6 months", "Google\n5"], ["0 - 6 months", "Karat\n5"], ["0 - 6 months", "Microsoft\n4"], ["0 - 6 months", "Facebook\n4"], ["0 - 6 months", "TikTok\n3"], ["0 - 6 months", "Apple\n2"], ["0 - 6 months", "Indeed\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Twitter\n15"], ["6 months - 1 year", "Adobe\n6"], ["6 months - 1 year", "Snapchat\n4"], ["6 months - 1 year", "Walmart Global Tech\n3"], ["6 months - 1 year", "Wayfair\n3"], ["6 months - 1 year", "Goldman Sachs\n2"], ["6 months - 1 year", "Roblox\n2"], ["6 months - 1 year", "ByteDance\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Intuit\n5"], ["1 year - 2 years", "Oracle\n4"], ["1 year - 2 years", "Qualtrics\n4"], ["1 year - 2 years", "Bolt\n4"], ["1 year - 2 years", "Samsung\n3"], ["1 year - 2 years", "Pinterest\n2"], ["1 year - 2 years", "Zillow\n2"], ["1 year - 2 years", "VMware\n2"], ["1 year - 2 years", "eBay\n2"], ["1 year - 2 years", "Cruise Automation\n2"], ["1 year - 2 years", "Paypal\n2"], ["1 year - 2 years", "Flipkart\n2"], ["1 year - 2 years", "Epic Systems\n2"]]}], "problem": "<p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> <em>if</em> <code>word</code> <em>exists in the grid</em>.</p>\n\n<p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" style=\"width: 322px; height: 242px;\">\n<pre><strong>Input:</strong> board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg\" style=\"width: 322px; height: 242px;\">\n<pre><strong>Input:</strong> board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/word3.jpg\" style=\"width: 322px; height: 242px;\">\n<pre><strong>Input:</strong> board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n = board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 6</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 15</code></li>\n\t<li><code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you use search pruning to make your solution faster with a larger <code>board</code>?</p>\n", "relatedTopics": ["Array", "Backtracking", "Matrix"], "similarQuestions": [{"questionName": "Word Search II", "difficulty": "Hard"}], "problemName": "word-search"}