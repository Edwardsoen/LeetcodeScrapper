{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Uber\n3"], ["6 months - 1 year", "Microsoft\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Facebook\n5"], ["1 year - 2 years", "Expedia\n4"], ["1 year - 2 years", "Bloomberg\n3"], ["1 year - 2 years", "Adobe\n2"], ["1 year - 2 years", "Oracle\n2"], ["1 year - 2 years", "Apple\n2"], ["1 year - 2 years", "Lyft\n2"]]}], "problem": "<p>Given an array of integers preorder, which represents the <strong>preorder traversal</strong> of a BST (i.e., <strong>binary search tree</strong>), construct the tree and return <em>its root</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that there is always possible to find a binary search tree with the given requirements for the given test cases.</p>\n\n<p>A <strong>binary search tree</strong> is a binary tree where for every node, any descendant of <code>Node.left</code> has a value <strong>strictly less than</strong> <code>Node.val</code>, and any descendant of <code>Node.right</code> has a value <strong>strictly greater than</strong> <code>Node.val</code>.</p>\n\n<p>A <strong>preorder traversal</strong> of a binary tree displays the value of the node first, then traverses <code>Node.left</code>, then traverses <code>Node.right</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1266.png\" style=\"height: 386px; width: 590px;\">\n<pre><strong>Input:</strong> preorder = [8,5,1,7,10,12]\n<strong>Output:</strong> [8,5,10,1,7,null,12]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> preorder = [1,3]\n<strong>Output:</strong> [1,null,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= preorder[i] &lt;= 1000</code></li>\n\t<li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>\n</ul>\n", "relatedTopics": [], "similarQuestions": [], "problemName": "construct-binary-search-tree-from-preorder-traversal"}