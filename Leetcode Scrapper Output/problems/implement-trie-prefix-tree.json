{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n5"], ["0 - 6 months", "Google\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Twitter\n7"], ["6 months - 1 year", "Microsoft\n5"], ["6 months - 1 year", "Snapchat\n5"], ["6 months - 1 year", "Pinterest\n3"], ["6 months - 1 year", "Opendoor\n3"], ["6 months - 1 year", "Oracle\n2"], ["6 months - 1 year", "Apple\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Docusign\n4"], ["1 year - 2 years", "Facebook\n3"], ["1 year - 2 years", "Bloomberg\n2"], ["1 year - 2 years", "Adobe\n2"], ["1 year - 2 years", "eBay\n2"], ["1 year - 2 years", "Goldman Sachs\n2"], ["1 year - 2 years", "ByteDance\n2"], ["1 year - 2 years", "Uber"]]}], "problem": "<p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as \"try\") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "String", "Design", "Trie"], "similarQuestions": [], "problemName": "implement-trie-prefix-tree"}