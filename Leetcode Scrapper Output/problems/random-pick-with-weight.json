{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Facebook\n13"], ["0 - 6 months", "Google\n9"], ["0 - 6 months", "Roblox\n4"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "LinkedIn\n8"], ["6 months - 1 year", "Uber\n8"], ["6 months - 1 year", "Amazon\n8"], ["6 months - 1 year", "Microsoft\n6"], ["6 months - 1 year", "Twitter\n2"], ["6 months - 1 year", "Apple\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Yelp\n7"], ["1 year - 2 years", "Bloomberg\n6"], ["1 year - 2 years", "Two Sigma\n4"], ["1 year - 2 years", "ByteDance\n4"], ["1 year - 2 years", "Snapchat\n3"], ["1 year - 2 years", "instacart\n3"], ["1 year - 2 years", "Expedia\n2"], ["1 year - 2 years", "Cruise Automation\n2"], ["1 year - 2 years", "Adobe\n2"], ["1 year - 2 years", "TikTok\n2"], ["1 year - 2 years", "Rubrik"]]}], "problem": "<p>You are given a <strong>0-indexed</strong> array of positive integers <code>w</code> where <code>w[i]</code> describes the <strong>weight</strong> of the <code>i<sup>th</sup></code> index.</p>\n\n<p>You need to implement the function <code>pickIndex()</code>, which <strong>randomly</strong> picks an index in the range <code>[0, w.length - 1]</code> (<strong>inclusive</strong>) and returns it. The <strong>probability</strong> of picking an index <code>i</code> is <code>w[i] / sum(w)</code>.</p>\n\n<ul>\n\t<li>For example, if <code>w = [1, 3]</code>, the probability of picking index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e., <code>25%</code>), and the probability of picking index <code>1</code> is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\n<strong>Output</strong>\n[null,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input</strong>\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\n<strong>Output</strong>\n[null,1,1,1,1,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= w.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pickIndex</code> will be called at most <code>10<sup>4</sup></code> times.</li>\n</ul>\n", "relatedTopics": ["Array", "Math", "Binary Search", "Prefix Sum", "Randomized"], "similarQuestions": [{"questionName": "Random Pick Index", "difficulty": "Medium"}, {"questionName": "Random Pick with Blacklist", "difficulty": "Hard"}, {"questionName": "Random Point in Non-overlapping Rectangles", "difficulty": "Medium"}], "problemName": "random-pick-with-weight"}