{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Apple\n3"], ["1 year - 2 years", "Bloomreach"]]}], "problem": "<p>A string is a <em>valid parentheses string</em>&nbsp;(denoted VPS) if and only if it consists of <code>\"(\"</code> and <code>\")\"</code> characters only, and:</p>\n\n<ul>\n\t<li>It is the empty string, or</li>\n\t<li>It can be written as&nbsp;<code>AB</code>&nbsp;(<code>A</code>&nbsp;concatenated with&nbsp;<code>B</code>), where&nbsp;<code>A</code>&nbsp;and&nbsp;<code>B</code>&nbsp;are VPS's, or</li>\n\t<li>It can be written as&nbsp;<code>(A)</code>, where&nbsp;<code>A</code>&nbsp;is a VPS.</li>\n</ul>\n\n<p>We can&nbsp;similarly define the <em>nesting depth</em> <code>depth(S)</code> of any VPS <code>S</code> as follows:</p>\n\n<ul>\n\t<li><code>depth(\"\") = 0</code></li>\n\t<li><code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are VPS's</li>\n\t<li><code>depth(\"(\" + A + \")\") = 1 + depth(A)</code>, where <code>A</code> is a VPS.</li>\n</ul>\n\n<p>For example,&nbsp; <code>\"\"</code>,&nbsp;<code>\"()()\"</code>, and&nbsp;<code>\"()(()())\"</code>&nbsp;are VPS's (with nesting depths 0, 1, and 2), and <code>\")(\"</code> and <code>\"(()\"</code> are not VPS's.</p>\n\n<p>&nbsp;</p>\n\n<p>Given a VPS <font face=\"monospace\">seq</font>, split it into two disjoint subsequences <code>A</code> and <code>B</code>, such that&nbsp;<code>A</code> and <code>B</code> are VPS's (and&nbsp;<code>A.length + B.length = seq.length</code>).</p>\n\n<p>Now choose <strong>any</strong> such <code>A</code> and <code>B</code> such that&nbsp;<code>max(depth(A), depth(B))</code> is the minimum possible value.</p>\n\n<p>Return an <code>answer</code> array (of length <code>seq.length</code>) that encodes such a&nbsp;choice of <code>A</code> and <code>B</code>:&nbsp; <code>answer[i] = 0</code> if <code>seq[i]</code> is part of <code>A</code>, else <code>answer[i] = 1</code>.&nbsp; Note that even though multiple answers may exist, you may return any of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> seq = \"(()())\"\n<strong>Output:</strong> [0,1,1,1,1,0]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> seq = \"()(())()\"\n<strong>Output:</strong> [0,0,0,1,1,0,1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= seq.size &lt;= 10000</code></li>\n</ul>\n", "relatedTopics": ["String", "Stack"], "similarQuestions": [{"questionName": "Maximum Nesting Depth of the Parentheses", "difficulty": "Easy"}], "problemName": "maximum-nesting-depth-of-two-valid-parentheses-strings"}