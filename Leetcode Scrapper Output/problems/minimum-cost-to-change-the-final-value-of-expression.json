{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Amazon\n2"], ["1 year - 2 years", "Google"]]}], "problem": "<p>You are given a <strong>valid</strong> boolean expression as a string <code>expression</code> consisting of the characters <code>'1'</code>,<code>'0'</code>,<code>'&amp;'</code> (bitwise <strong>AND</strong> operator),<code>'|'</code> (bitwise <strong>OR</strong> operator),<code>'('</code>, and <code>')'</code>.</p>\n\n<ul>\n\t<li>For example, <code>\"()1|1\"</code> and <code>\"(1)&amp;()\"</code> are <strong>not valid</strong> while <code>\"1\"</code>, <code>\"(((1))|(0))\"</code>, and <code>\"1|(0&amp;(1))\"</code> are <strong>valid</strong> expressions.</li>\n</ul>\n\n<p>Return<em> the <strong>minimum cost</strong> to change the final value of the expression</em>.</p>\n\n<ul>\n\t<li>For example, if <code>expression = \"1|1|(0&amp;0)&amp;1\"</code>, its <strong>value</strong> is <code>1|1|(0&amp;0)&amp;1 = 1|1|0&amp;1 = 1|0&amp;1 = 1&amp;1 = 1</code>. We want to apply operations so that the<strong> new</strong> expression evaluates to <code>0</code>.</li>\n</ul>\n\n<p>The <strong>cost</strong> of changing the final value of an expression is the <strong>number of operations</strong> performed on the expression. The types of <strong>operations</strong> are described as follows:</p>\n\n<ul>\n\t<li>Turn a <code>'1'</code> into a <code>'0'</code>.</li>\n\t<li>Turn a <code>'0'</code> into a <code>'1'</code>.</li>\n\t<li>Turn a <code>'&amp;'</code> into a <code>'|'</code>.</li>\n\t<li>Turn a <code>'|'</code> into a <code>'&amp;'</code>.</li>\n</ul>\n\n<p><strong>Note:</strong> <code>'&amp;'</code> does <strong>not</strong> take precedence over <code>'|'</code> in the <strong>order of calculation</strong>. Evaluate parentheses <strong>first</strong>, then in <strong>left-to-right</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"1&amp;(0|1)\"\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn \"1&amp;(0<u><strong>|</strong></u>1)\" into \"1&amp;(0<u><strong>&amp;</strong></u>1)\" by changing the '|' to a '&amp;' using 1 operation.\nThe new expression evaluates to 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"(0&amp;0)&amp;(0&amp;0&amp;0)\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can turn \"(0<u><strong>&amp;0</strong></u>)<strong><u>&amp;</u></strong>(0&amp;0&amp;0)\" into \"(0<u><strong>|1</strong></u>)<u><strong>|</strong></u>(0&amp;0&amp;0)\" using 3 operations.\nThe new expression evaluates to 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"(0|(1|0&amp;1))\"\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn \"(0|(<u><strong>1</strong></u>|0&amp;1))\" into \"(0|(<u><strong>0</strong></u>|0&amp;1))\" using 1 operation.\nThe new expression evaluates to 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>expression</code>&nbsp;only contains&nbsp;<code>'1'</code>,<code>'0'</code>,<code>'&amp;'</code>,<code>'|'</code>,<code>'('</code>, and&nbsp;<code>')'</code></li>\n\t<li>All parentheses&nbsp;are properly matched.</li>\n\t<li>There will be no empty parentheses (i.e:&nbsp;<code>\"()\"</code>&nbsp;is not a substring of&nbsp;<code>expression</code>).</li>\n</ul>\n", "relatedTopics": [], "similarQuestions": [], "problemName": "minimum-cost-to-change-the-final-value-of-expression"}