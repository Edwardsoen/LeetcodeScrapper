{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n5"], ["0 - 6 months", "Microsoft\n4"], ["0 - 6 months", "Apple\n4"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "VMware\n3"], ["6 months - 1 year", "Shopee\n3"], ["6 months - 1 year", "Twitter\n2"], ["6 months - 1 year", "Goldman Sachs\n2"], ["6 months - 1 year", "Facebook\n2"], ["6 months - 1 year", "Google\n2"], ["6 months - 1 year", "Oracle\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "LinkedIn\n13"], ["1 year - 2 years", "Salesforce\n5"], ["1 year - 2 years", "ServiceNow\n4"], ["1 year - 2 years", "Adobe\n3"], ["1 year - 2 years", "Walmart Global Tech\n3"], ["1 year - 2 years", "Bloomberg\n3"], ["1 year - 2 years", "Uber\n2"], ["1 year - 2 years", "ByteDance\n2"], ["1 year - 2 years", "Zynga\n2"]]}], "problem": "<p>Design a HashMap without using any built-in hash table libraries.</p>\n\n<p>Implement the <code>MyHashMap</code> class:</p>\n\n<ul>\n\t<li><code>MyHashMap()</code> initializes the object with an empty map.</li>\n\t<li><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the <code>key</code> already exists in the map, update the corresponding <code>value</code>.</li>\n\t<li><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</li>\n\t<li><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n<strong>Output</strong>\n[null, null, null, 1, -1, null, 1, null, -1]\n\n<strong>Explanation</strong>\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Hash Table", "Linked List", "Design", "Hash Function"], "similarQuestions": [{"questionName": "Design HashSet", "difficulty": "Easy"}, {"questionName": "Design Skiplist", "difficulty": "Hard"}], "problemName": "design-hashmap"}