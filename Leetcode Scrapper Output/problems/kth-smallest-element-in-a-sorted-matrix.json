{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Facebook\n14"], ["6 months - 1 year", "Microsoft\n6"], ["6 months - 1 year", "Uber\n4"], ["6 months - 1 year", "Google\n3"], ["6 months - 1 year", "Adobe\n2"], ["6 months - 1 year", "Bloomberg\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Apple\n4"], ["1 year - 2 years", "ByteDance\n2"], ["1 year - 2 years", "Splunk\n2"], ["1 year - 2 years", "Twitter"]]}], "problem": "<p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns is sorted in ascending order, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest element in the matrix</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> smallest element <strong>in the sorted order</strong>, not the <code>k<sup>th</sup></code> <strong>distinct</strong> element.</p>\n\n<p>You must find a solution with a memory complexity better than <code>O(n<sup>2</sup>)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The elements in the matrix are [1,5,9,10,11,12,13,<u><strong>13</strong></u>,15], and the 8<sup>th</sup> smallest number is 13\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> matrix = [[-5]], k = 1\n<strong>Output:</strong> -5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the rows and columns of <code>matrix</code> are <strong>guaranteed</strong> to be sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= n<sup>2</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you solve the problem with a constant memory (i.e., <code>O(1)</code> memory complexity)?</li>\n\t<li>Could you solve the problem in <code>O(n)</code> time complexity? The solution may be too advanced for an interview but you may find reading <a href=\"http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf\" target=\"_blank\">this paper</a> fun.</li>\n</ul>\n", "relatedTopics": ["Array", "Binary Search", "Sorting", "Heap (Priority Queue)", "Matrix"], "similarQuestions": [{"questionName": "Find K Pairs with Smallest Sums", "difficulty": "Medium"}, {"questionName": "Kth Smallest Number in Multiplication Table", "difficulty": "Hard"}, {"questionName": "Find K-th Smallest Pair Distance", "difficulty": "Hard"}, {"questionName": "K-th Smallest Prime Fraction", "difficulty": "Medium"}], "problemName": "kth-smallest-element-in-a-sorted-matrix"}