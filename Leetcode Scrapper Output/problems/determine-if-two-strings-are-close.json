{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Google\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Postmates"]]}], "problem": "<p>Two strings are considered <strong>close</strong> if you can attain one from the other using the following operations:</p>\n\n<ul>\n\t<li>Operation 1: Swap any two <strong>existing</strong> characters.\n\n\t<ul>\n\t\t<li>For example, <code>a<u>b</u>cd<u>e</u> -&gt; a<u>e</u>cd<u>b</u></code></li>\n\t</ul>\n\t</li>\n\t<li>Operation 2: Transform <strong>every</strong> occurrence of one <strong>existing</strong> character into another <strong>existing</strong> character, and do the same with the other character.\n\t<ul>\n\t\t<li>For example, <code><u>aa</u>c<u>abb</u> -&gt; <u>bb</u>c<u>baa</u></code> (all <code>a</code>'s turn into <code>b</code>'s, and all <code>b</code>'s turn into <code>a</code>'s)</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>You can use the operations on either string as many times as necessary.</p>\n\n<p>Given two strings, <code>word1</code> and <code>word2</code>, return <code>true</code><em> if </em><code>word1</code><em> and </em><code>word2</code><em> are <strong>close</strong>, and </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> word1 = \"abc\", word2 = \"bca\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"a<u>bc</u>\" -&gt; \"a<u>cb</u>\"\nApply Operation 1: \"<u>a</u>c<u>b</u>\" -&gt; \"<u>b</u>c<u>a</u>\"\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> word1 = \"a\", word2 = \"aa\"\n<strong>Output:</strong> false\n<strong>Explanation: </strong>It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> word1 = \"cabbba\", word2 = \"abbccc\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"ca<u>b</u>bb<u>a</u>\" -&gt; \"ca<u>a</u>bb<u>b</u>\"\n<code>Apply Operation 2: \"</code><u>c</u>aa<u>bbb</u>\" -&gt; \"<u>b</u>aa<u>ccc</u>\"\nApply Operation 2: \"<u>baa</u>ccc\" -&gt; \"<u>abb</u>ccc\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word1</code> and <code>word2</code> contain only lowercase English letters.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "String", "Sorting"], "similarQuestions": [{"questionName": "Buddy Strings", "difficulty": "Easy"}, {"questionName": "Minimum Swaps to Make Strings Equal", "difficulty": "Medium"}, {"questionName": "Minimum Number of Steps to Make Two Strings Anagram", "difficulty": "Medium"}], "problemName": "determine-if-two-strings-are-close"}