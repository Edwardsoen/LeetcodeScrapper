{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n19"], ["0 - 6 months", "Lyft\n6"], ["0 - 6 months", "Uber\n4"], ["0 - 6 months", "Apple\n2"], ["0 - 6 months", "Bloomberg\n2"], ["0 - 6 months", "Salesforce\n2"], ["0 - 6 months", "TikTok\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n11"], ["6 months - 1 year", "Adobe\n5"], ["6 months - 1 year", "Google\n4"], ["6 months - 1 year", "LinkedIn\n3"], ["6 months - 1 year", "VMware\n3"], ["6 months - 1 year", "Goldman Sachs\n2"], ["6 months - 1 year", "Intuit\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Walmart Global Tech\n4"], ["1 year - 2 years", "Samsung\n4"], ["1 year - 2 years", "Facebook\n3"], ["1 year - 2 years", "Oracle\n3"], ["1 year - 2 years", "eBay\n2"], ["1 year - 2 years", "InMobi\n2"], ["1 year - 2 years", "Twilio\n2"]]}], "problem": "<p>You are given an <code>m x n</code> <code>grid</code> where each cell can have one of three values:</p>\n\n<ul>\n\t<li><code>0</code> representing an empty cell,</li>\n\t<li><code>1</code> representing a fresh orange, or</li>\n\t<li><code>2</code> representing a rotten orange.</li>\n</ul>\n\n<p>Every minute, any fresh orange that is <strong>4-directionally adjacent</strong> to a rotten orange becomes rotten.</p>\n\n<p>Return <em>the minimum number of minutes that must elapse until no cell has a fresh orange</em>. If <em>this is impossible, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/16/oranges.png\" style=\"width: 650px; height: 137px;\">\n<pre><strong>Input:</strong> grid = [[2,1,1],[1,1,0],[0,1,1]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> grid = [[2,1,1],[0,1,1],[1,0,1]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> grid = [[0,2]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Since there are already no fresh oranges at minute 0, the answer is just 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>grid[i][j]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Breadth-First Search", "Matrix"], "similarQuestions": [], "problemName": "rotting-oranges"}