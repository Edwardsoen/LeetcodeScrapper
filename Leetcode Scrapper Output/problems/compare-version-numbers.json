{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n4"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n5"], ["6 months - 1 year", "Nutanix\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Salesforce\n5"], ["1 year - 2 years", "ByteDance\n4"], ["1 year - 2 years", "Apple\n2"], ["1 year - 2 years", "Cisco\n2"], ["1 year - 2 years", "Arista Networks\n2"], ["1 year - 2 years", "Oracle\n2"]]}], "problem": "<p>Given two version numbers,&nbsp;<code>version1</code> and <code>version2</code>, compare them.</p>\n\n<ul>\n</ul>\n\n<p>Version numbers consist of <strong>one or more revisions</strong> joined by a dot&nbsp;<code>'.'</code>. Each revision&nbsp;consists of <strong>digits</strong>&nbsp;and may contain leading <strong>zeros</strong>. Every revision contains <strong>at least one character</strong>. Revisions are <strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example&nbsp;<code>2.5.33</code>&nbsp;and&nbsp;<code>0.1</code>&nbsp;are valid version numbers.</p>\n\n<p>To compare version numbers, compare their revisions in <strong>left-to-right order</strong>. Revisions are compared using their&nbsp;<strong>integer value ignoring any leading zeros</strong>. This means that revisions&nbsp;<code>1</code>&nbsp;and&nbsp;<code>001</code>&nbsp;are considered&nbsp;<strong>equal</strong>. If a version number does not specify a revision at an index, then&nbsp;<strong>treat the revision as&nbsp;<code>0</code></strong>. For example, version&nbsp;<code>1.0</code> is less than version&nbsp;<code>1.1</code>&nbsp;because their revision 0s are the same, but their revision 1s are&nbsp;<code>0</code>&nbsp;and&nbsp;<code>1</code>&nbsp;respectively, and&nbsp;<code>0 &lt; 1</code>.</p>\n\n<p><em>Return the following:</em></p>\n\n<ul>\n\t<li>If <code>version1 &lt; version2</code>, return <code>-1</code>.</li>\n\t<li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li>\n\t<li>Otherwise, return <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> version1 = \"1.01\", version2 = \"1.001\"\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> version1 = \"1.0\", version2 = \"1.0.0\"\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> version1 does not specify revision 2, which means it is treated as \"0\".\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> version1 = \"0.1\", version2 = \"1.1\"\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 &lt; 1, so version1 &lt; version2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;only contain digits and <code>'.'</code>.</li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;<strong>are valid version numbers</strong>.</li>\n\t<li>All the given revisions in&nbsp;<code>version1</code> and <code>version2</code>&nbsp;can be stored in&nbsp;a&nbsp;<strong>32-bit integer</strong>.</li>\n</ul>\n", "relatedTopics": [], "similarQuestions": [], "problemName": "compare-version-numbers"}