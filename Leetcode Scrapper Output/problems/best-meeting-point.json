{"tags": [{"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Google\n2"], ["6 months - 1 year", "Snapchat\n2"], ["6 months - 1 year", "Reddit\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Facebook\n7"], ["1 year - 2 years", "Expedia\n5"], ["1 year - 2 years", "Amazon\n2"], ["1 year - 2 years", "Microsoft\n2"], ["1 year - 2 years", "Twitter"]]}], "problem": "<p>Given an <code>m x n</code> binary grid <code>grid</code> where each <code>1</code> marks the home of one friend, return <em>the minimal <strong>total travel distance</strong></em>.</p>\n\n<p>The <strong>total travel distance</strong> is the sum of the distances between the houses of the friends and the meeting point.</p>\n\n<p>The distance is calculated using <a href=\"http://en.wikipedia.org/wiki/Taxicab_geometry\" target=\"_blank\">Manhattan Distance</a>, where <code>distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/meetingpoint-grid.jpg\" style=\"width: 413px; height: 253px;\">\n<pre><strong>Input:</strong> grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Given three friends living at (0,0), (0,4), and (2,2).\nThe point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.\nSo return 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> grid = [[1,1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li>There will be <strong>at least two</strong> friends in the <code>grid</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Math", "Sorting", "Matrix"], "similarQuestions": [], "problemName": "best-meeting-point"}