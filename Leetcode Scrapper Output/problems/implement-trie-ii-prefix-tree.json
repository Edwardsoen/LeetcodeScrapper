{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Apple\n2"], ["1 year - 2 years", "Docusign\n2"]]}], "problem": "<p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as \"try\") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>int countWordsEqualTo(String word)</code> Returns the number of instances of the string <code>word</code> in the trie.</li>\n\t<li><code>int countWordsStartingWith(String prefix)</code> Returns the number of strings in the trie that have the string <code>prefix</code> as a prefix.</li>\n\t<li><code>void erase(String word)</code> Erases the string <code>word</code> from the trie.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"Trie\", \"insert\", \"insert\", \"countWordsEqualTo\", \"countWordsStartingWith\", \"erase\", \"countWordsEqualTo\", \"countWordsStartingWith\", \"erase\", \"countWordsStartingWith\"]\n[[], [\"apple\"], [\"apple\"], [\"apple\"], [\"app\"], [\"apple\"], [\"apple\"], [\"app\"], [\"apple\"], [\"app\"]]\n<strong>Output</strong>\n[null, null, null, 2, 2, null, 1, 1, null, 0]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");               // Inserts \"apple\".\ntrie.insert(\"apple\");               // Inserts another \"apple\".\ntrie.countWordsEqualTo(\"apple\");    // There are two instances of \"apple\" so return 2.\ntrie.countWordsStartingWith(\"app\"); // \"app\" is a prefix of \"apple\" so return 2.\ntrie.erase(\"apple\");                // Erases one \"apple\".\ntrie.countWordsEqualTo(\"apple\");    // Now there is only one instance of \"apple\" so return 1.\ntrie.countWordsStartingWith(\"app\"); // return 1\ntrie.erase(\"apple\");                // Erases \"apple\". Now the trie is empty.\ntrie.countWordsStartingWith(\"app\"); // return 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>countWordsEqualTo</code>, <code>countWordsStartingWith</code>, and <code>erase</code>.</li>\n\t<li>It is guaranteed that for any function call to <code>erase</code>, the string <code>word</code> will exist in the trie.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "String", "Design", "Trie"], "similarQuestions": [{"questionName": "Implement Trie (Prefix Tree)", "difficulty": "Medium"}, {"questionName": "Encrypt and Decrypt Strings", "difficulty": "Hard"}], "problemName": "implement-trie-ii-prefix-tree"}