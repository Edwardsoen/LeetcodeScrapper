{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n9"], ["0 - 6 months", "Cisco\n5"], ["0 - 6 months", "Facebook\n3"], ["0 - 6 months", "Google\n2"], ["0 - 6 months", "Bloomberg\n2"], ["0 - 6 months", "Salesforce\n2"], ["0 - 6 months", "TikTok\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n7"], ["6 months - 1 year", "Lyft\n7"], ["6 months - 1 year", "Apple\n4"], ["6 months - 1 year", "Commvault\n3"], ["6 months - 1 year", "Uber\n2"], ["6 months - 1 year", "Goldman Sachs\n2"], ["6 months - 1 year", "Nagarro\n2"], ["6 months - 1 year", "Duolingo\n2"], ["6 months - 1 year", "Qualtrics\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "JPMorgan\n16"], ["1 year - 2 years", "Snapchat\n8"], ["1 year - 2 years", "Karat\n4"], ["1 year - 2 years", "Square\n3"], ["1 year - 2 years", "Shopee\n3"], ["1 year - 2 years", "Adobe\n2"], ["1 year - 2 years", "Yahoo\n2"], ["1 year - 2 years", "ByteDance\n2"], ["1 year - 2 years", "MakeMyTrip\n2"]]}], "problem": "<p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p>\n\n<pre>'A' -&gt; \"1\"\n'B' -&gt; \"2\"\n...\n'Z' -&gt; \"26\"\n</pre>\n\n<p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>\"11106\"</code> can be mapped into:</p>\n\n<ul>\n\t<li><code>\"AAJF\"</code> with the grouping <code>(1 1 10 6)</code></li>\n\t<li><code>\"KJF\"</code> with the grouping <code>(11 10 6)</code></li>\n</ul>\n\n<p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>\"06\"</code> cannot be mapped into <code>'F'</code> since <code>\"6\"</code> is different from <code>\"06\"</code>.</p>\n\n<p>Given a string <code>s</code> containing only digits, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p>\n\n<p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"12\"\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"226\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"06\"\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> contains only digits and may contain leading zero(s).</li>\n</ul>\n", "relatedTopics": ["String", "Dynamic Programming"], "similarQuestions": [{"questionName": "Decode Ways II", "difficulty": "Hard"}, {"questionName": "Number of Ways to Separate Numbers", "difficulty": "Hard"}, {"questionName": "Count Number of Texts", "difficulty": "Medium"}], "problemName": "decode-ways"}