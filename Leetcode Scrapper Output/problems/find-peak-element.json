{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Facebook\n6"], ["0 - 6 months", "Amazon\n4"], ["0 - 6 months", "Google\n3"], ["0 - 6 months", "Apple\n2"], ["0 - 6 months", "Adobe\n2"], ["0 - 6 months", "Uber\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Snapchat\n4"], ["6 months - 1 year", "Roblox\n3"], ["6 months - 1 year", "Bloomberg\n2"], ["6 months - 1 year", "Microsoft\n2"], ["6 months - 1 year", "TikTok\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "HRT\n8"], ["1 year - 2 years", "Walmart Global Tech\n3"], ["1 year - 2 years", "VMware\n3"], ["1 year - 2 years", "Paypal\n3"], ["1 year - 2 years", "Yahoo\n2"], ["1 year - 2 years", "IXL\n2"], ["1 year - 2 years", "Goldman Sachs\n2"]]}], "problem": "<p>A peak element is an element that is strictly greater than its neighbors.</p>\n\n<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p>\n\n<p>You may imagine that <code>nums[-1] = nums[n] = -\u221e</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p>\n\n<p>You must write an algorithm that runs in <code>O(log n)</code> time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 is a peak element and your function should return the index number 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [1,2,1,3,5,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Binary Search"], "similarQuestions": [], "problemName": "find-peak-element"}