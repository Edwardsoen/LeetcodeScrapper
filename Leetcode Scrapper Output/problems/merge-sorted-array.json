{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Facebook\n5"], ["0 - 6 months", "Google\n4"], ["0 - 6 months", "Amazon\n4"], ["0 - 6 months", "Bloomberg\n2"], ["0 - 6 months", "Yahoo\n2"], ["0 - 6 months", "Reddit\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n15"], ["6 months - 1 year", "Apple\n7"], ["6 months - 1 year", "Adobe\n5"], ["6 months - 1 year", "LinkedIn\n5"], ["6 months - 1 year", "Oracle\n5"], ["6 months - 1 year", "Indeed\n3"], ["6 months - 1 year", "Goldman Sachs\n2"], ["6 months - 1 year", "Morgan Stanley\n2"], ["6 months - 1 year", "Splunk\n2"], ["6 months - 1 year", "Nvidia\n2"], ["6 months - 1 year", "Barclays\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Uber\n5"], ["1 year - 2 years", "Visa\n5"], ["1 year - 2 years", "Shopee\n5"], ["1 year - 2 years", "Walmart Global Tech\n4"], ["1 year - 2 years", "Tableau\n3"], ["1 year - 2 years", "Wish\n3"], ["1 year - 2 years", "Cisco\n2"], ["1 year - 2 years", "Paypal\n2"], ["1 year - 2 years", "IBM\n2"], ["1 year - 2 years", "ByteDance\n2"], ["1 year - 2 years", "Salesforce\n2"], ["1 year - 2 years", "Samsung\n2"], ["1 year - 2 years", "Infosys\n2"], ["1 year - 2 years", "Epam Systems\n2"]]}], "problem": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n", "relatedTopics": ["Array", "Two Pointers", "Sorting"], "similarQuestions": [{"questionName": "Merge Two Sorted Lists", "difficulty": "Easy"}, {"questionName": "Squares of a Sorted Array", "difficulty": "Easy"}, {"questionName": "Interval List Intersections", "difficulty": "Medium"}, {"questionName": "Take K of Each Character From Left and Right", "difficulty": "Medium"}], "problemName": "merge-sorted-array"}