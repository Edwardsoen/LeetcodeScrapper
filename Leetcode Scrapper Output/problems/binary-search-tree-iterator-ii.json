{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Microsoft\n2"], ["1 year - 2 years", "Facebook"]]}], "problem": "<p>Implement the <code>BSTIterator</code> class that represents an iterator over the <strong><a href=\"https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)\">in-order traversal</a></strong> of a binary search tree (BST):</p>\n\n<ul>\n\t<li><code>BSTIterator(TreeNode root)</code> Initializes an object of the <code>BSTIterator</code> class. The <code>root</code> of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there exists a number in the traversal to the right of the pointer, otherwise returns <code>false</code>.</li>\n\t<li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li>\n\t<li><code>boolean hasPrev()</code> Returns <code>true</code> if there exists a number in the traversal to the left of the pointer, otherwise returns <code>false</code>.</li>\n\t<li><code>int prev()</code> Moves the pointer to the left, then returns the number at the pointer.</li>\n</ul>\n\n<p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p>\n\n<p>You may assume that <code>next()</code> and <code>prev()</code> calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when <code>next()</code>/<code>prev()</code> is called.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/untitled-diagram-1.png\" style=\"width: 201px; height: 201px;\"></strong></p>\n\n<pre><strong>Input</strong>\n[\"BSTIterator\", \"next\", \"next\", \"prev\", \"next\", \"hasNext\", \"next\", \"next\", \"next\", \"hasNext\", \"hasPrev\", \"prev\", \"prev\"]\n[[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]]\n<strong>Output</strong>\n[null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]\n\n<strong>Explanation</strong>\n// The underlined element is where the pointer currently is.\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); // state is <u> </u> [3, 7, 9, 15, 20]\nbSTIterator.next(); // state becomes [<u>3</u>, 7, 9, 15, 20], return 3\nbSTIterator.next(); // state becomes [3, <u>7</u>, 9, 15, 20], return 7\nbSTIterator.prev(); // state becomes [<u>3</u>, 7, 9, 15, 20], return 3\nbSTIterator.next(); // state becomes [3, <u>7</u>, 9, 15, 20], return 7\nbSTIterator.hasNext(); // return true\nbSTIterator.next(); // state becomes [3, 7, <u>9</u>, 15, 20], return 9\nbSTIterator.next(); // state becomes [3, 7, 9, <u>15</u>, 20], return 15\nbSTIterator.next(); // state becomes [3, 7, 9, 15, <u>20</u>], return 20\nbSTIterator.hasNext(); // return false\nbSTIterator.hasPrev(); // return true\nbSTIterator.prev(); // state becomes [3, 7, 9, <u>15</u>, 20], return 15\nbSTIterator.prev(); // state becomes [3, 7, <u>9</u>, 15, 20], return 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>hasNext</code>, <code>next</code>, <code>hasPrev</code>, and <code>prev</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve the problem without precalculating the values of the tree?", "relatedTopics": ["Stack", "Tree", "Design", "Binary Search Tree", "Binary Tree", "Iterator"], "similarQuestions": [{"questionName": "Binary Search Tree Iterator", "difficulty": "Medium"}], "problemName": "binary-search-tree-iterator-ii"}