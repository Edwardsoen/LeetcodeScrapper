{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Bloomberg\n53"], ["0 - 6 months", "Amazon\n9"], ["0 - 6 months", "Uber\n4"], ["0 - 6 months", "Google\n3"], ["0 - 6 months", "LinkedIn\n2"], ["0 - 6 months", "Facebook\n2"], ["0 - 6 months", "Affirm\n2"], ["0 - 6 months", "Adobe\n2"], ["0 - 6 months", "Citadel\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n14"], ["6 months - 1 year", "Apple\n9"], ["6 months - 1 year", "Twitter\n6"], ["6 months - 1 year", "Snapchat\n4"], ["6 months - 1 year", "Oracle\n4"], ["6 months - 1 year", "DE Shaw\n3"], ["6 months - 1 year", "Qualtrics\n2"], ["6 months - 1 year", "Yandex\n2"], ["6 months - 1 year", "TikTok\n2"], ["6 months - 1 year", "Tesla\n2"], ["6 months - 1 year", "Coupang\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Two Sigma\n6"], ["1 year - 2 years", "Walmart Global Tech\n5"], ["1 year - 2 years", "Quora\n4"], ["1 year - 2 years", "VMware\n4"], ["1 year - 2 years", "Indeed\n3"], ["1 year - 2 years", "HRT\n3"], ["1 year - 2 years", "eBay\n3"], ["1 year - 2 years", "Intel\n3"], ["1 year - 2 years", "Databricks\n2"], ["1 year - 2 years", "Flipkart\n2"], ["1 year - 2 years", "Pure Storage\n2"], ["1 year - 2 years", "Goldman Sachs\n2"], ["1 year - 2 years", "Expedia\n2"], ["1 year - 2 years", "ByteDance\n2"], ["1 year - 2 years", "Wish\n2"], ["1 year - 2 years", "payu\n2"], ["1 year - 2 years", "Yelp"], ["1 year - 2 years", "Pocket Gems"]]}], "problem": "<p>Implement the <code>RandomizedSet</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the <b>same probability</b> of being returned.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works in&nbsp;<strong>average</strong>&nbsp;<code>O(1)</code>&nbsp;time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, false, 2]\n\n<strong>Explanation</strong>\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 *&nbsp;</code><code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n", "relatedTopics": ["Array", "Hash Table", "Math", "Design", "Randomized"], "similarQuestions": [{"questionName": "Insert Delete GetRandom O(1) - Duplicates allowed", "difficulty": "Hard"}], "problemName": "insert-delete-getrandom-o1"}