{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n5"], ["0 - 6 months", "Lyft\n4"], ["0 - 6 months", "Bloomberg\n3"], ["0 - 6 months", "Databricks\n2"], ["0 - 6 months", "Google\n2"], ["0 - 6 months", "Apple\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n3"], ["6 months - 1 year", "Zillow\n2"], ["6 months - 1 year", "Uber\n2"], ["6 months - 1 year", "Oracle\n2"], ["6 months - 1 year", "ByteDance\n2"], ["6 months - 1 year", "Citadel\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "instacart\n32"], ["1 year - 2 years", "Netflix\n6"], ["1 year - 2 years", "TikTok\n3"], ["1 year - 2 years", "Facebook\n2"], ["1 year - 2 years", "LinkedIn\n2"], ["1 year - 2 years", "Snapchat\n2"], ["1 year - 2 years", "Hulu\n2"], ["1 year - 2 years", "Rubrik\n2"], ["1 year - 2 years", "Flexport"]]}], "problem": "<p>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.</p>\n\n<p>Implement the <code>TimeMap</code> class:</p>\n\n<ul>\n\t<li><code>TimeMap()</code> Initializes the object of the data structure.</li>\n\t<li><code>void set(String key, String value, int timestamp)</code> Stores the key <code>key</code> with the value <code>value </code>at the given time <code>timestamp</code>.</li>\n\t<li><code>String get(String key, int timestamp)</code> Returns a value such that <code>set</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>\"\"</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\n<strong>Output</strong>\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\n\n<strong>Explanation</strong>\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length, value.length &lt;= 100</code></li>\n\t<li><code>key</code> and <code>value</code> consist of lowercase English letters and digits.</li>\n\t<li><code>1 &lt;= timestamp &lt;= 10<sup>7</sup></code></li>\n\t<li>All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>set</code> and <code>get</code>.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "String", "Binary Search", "Design"], "similarQuestions": [{"questionName": "Stock Price Fluctuation", "difficulty": "Medium"}], "problemName": "time-based-key-value-store"}