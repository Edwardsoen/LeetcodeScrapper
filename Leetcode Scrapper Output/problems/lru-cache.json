{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n58"], ["0 - 6 months", "Bloomberg\n18"], ["0 - 6 months", "Apple\n13"], ["0 - 6 months", "Google\n9"], ["0 - 6 months", "DoorDash\n6"], ["0 - 6 months", "Microsoft\n4"], ["0 - 6 months", "eBay\n3"], ["0 - 6 months", "Paypal\n3"], ["0 - 6 months", "TikTok\n3"], ["0 - 6 months", "Yandex\n2"], ["0 - 6 months", "Facebook\n2"], ["0 - 6 months", "Oracle\n2"], ["0 - 6 months", "Adobe\n2"], ["0 - 6 months", "Zillow\n2"], ["0 - 6 months", "Cloudera\n2"], ["0 - 6 months", "Goldman Sachs\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Twilio\n9"], ["6 months - 1 year", "Intuit\n7"], ["6 months - 1 year", "LinkedIn\n6"], ["6 months - 1 year", "Uber\n5"], ["6 months - 1 year", "Salesforce\n5"], ["6 months - 1 year", "Nvidia\n5"], ["6 months - 1 year", "Yahoo\n4"], ["6 months - 1 year", "Walmart Global Tech\n4"], ["6 months - 1 year", "ByteDance\n4"], ["6 months - 1 year", "Zoom\n4"], ["6 months - 1 year", "VMware\n2"], ["6 months - 1 year", "Citadel\n2"], ["6 months - 1 year", "Snapchat\n2"], ["6 months - 1 year", "GoDaddy\n2"], ["6 months - 1 year", "Visa\n2"], ["6 months - 1 year", "Spotify\n2"], ["6 months - 1 year", "Tesla\n2"], ["6 months - 1 year", "Twitch\n2"], ["6 months - 1 year", "Cohesity\n2"], ["6 months - 1 year", "PayTM\n2"], ["6 months - 1 year", "Media.net\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Shopee\n7"], ["1 year - 2 years", "Dropbox\n5"], ["1 year - 2 years", "Cisco\n5"], ["1 year - 2 years", "Morgan Stanley\n5"], ["1 year - 2 years", "Splunk\n5"], ["1 year - 2 years", "Docusign\n5"], ["1 year - 2 years", "Intel\n4"], ["1 year - 2 years", "Cruise Automation\n3"], ["1 year - 2 years", "JPMorgan\n3"], ["1 year - 2 years", "ServiceNow\n3"], ["1 year - 2 years", "Citrix\n3"], ["1 year - 2 years", "Sumologic\n3"], ["1 year - 2 years", "Sprinklr\n3"], ["1 year - 2 years", "Coupang\n2"], ["1 year - 2 years", "Square\n2"], ["1 year - 2 years", "Samsung\n2"], ["1 year - 2 years", "Expedia\n2"], ["1 year - 2 years", "Grab\n2"], ["1 year - 2 years", "HBO\n2"], ["1 year - 2 years", "Atlassian\n2"], ["1 year - 2 years", "Roblox\n2"], ["1 year - 2 years", "BlackRock\n2"], ["1 year - 2 years", "Infosys\n2"], ["1 year - 2 years", "MakeMyTrip\n2"], ["1 year - 2 years", "Swiggy\n2"], ["1 year - 2 years", "Akamai\n2"], ["1 year - 2 years", "Electronic Arts\n2"], ["1 year - 2 years", "PayPay\n2"], ["1 year - 2 years", "Palantir Technologies"], ["1 year - 2 years", "Twitter"], ["1 year - 2 years", "Zenefits"]]}], "problem": "<p>Design a data structure that follows the constraints of a <strong><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a></strong>.</p>\n\n<p>Implement the <code>LRUCache</code> class:</p>\n\n<ul>\n\t<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>\n\t<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>\n</ul>\n\n<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity &lt;= 3000</code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"], "similarQuestions": [], "problemName": "lru-cache"}