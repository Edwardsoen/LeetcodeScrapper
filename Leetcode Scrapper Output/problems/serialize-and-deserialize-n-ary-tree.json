{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Uber\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Apple\n6"], ["6 months - 1 year", "Bloomberg\n4"], ["6 months - 1 year", "Google\n3"], ["6 months - 1 year", "Microsoft\n3"], ["6 months - 1 year", "Amazon\n3"], ["6 months - 1 year", "DoorDash\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Zoom\n4"]]}], "problem": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p>For example, you may serialize the following <code>3-ary</code> tree</p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 500px; max-width: 300px; height: 321px;\">\n<p>&nbsp;</p>\n\n<p>as <code>[1 [3[5 6] 2 4]]</code>. Note that this is just an example, you do not necessarily need to follow this format.</p>\n\n<p>Or you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 500px; height: 454px;\">\n<p>&nbsp;</p>\n\n<p>For example, the above tree may be serialized as <code>[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</code>.</p>\n\n<p>You do not necessarily need to follow the above-suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [1,null,3,2,4,null,5,6]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>\n\t<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>\n</ul>\n", "relatedTopics": ["String", "Tree", "Depth-First Search", "Breadth-First Search"], "similarQuestions": [], "problemName": "serialize-and-deserialize-n-ary-tree"}