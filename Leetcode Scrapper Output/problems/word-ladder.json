{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n23"], ["0 - 6 months", "Bloomberg\n5"], ["0 - 6 months", "Google\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n11"], ["6 months - 1 year", "Facebook\n9"], ["6 months - 1 year", "LinkedIn\n9"], ["6 months - 1 year", "Qualtrics\n8"], ["6 months - 1 year", "PayPay\n8"], ["6 months - 1 year", "Lyft\n6"], ["6 months - 1 year", "Adobe\n5"], ["6 months - 1 year", "Apple\n4"], ["6 months - 1 year", "Snapchat\n3"], ["6 months - 1 year", "Uber\n2"], ["6 months - 1 year", "Yahoo\n2"], ["6 months - 1 year", "Walmart Global Tech\n2"], ["6 months - 1 year", "Box\n2"], ["6 months - 1 year", "Intel\n2"], ["6 months - 1 year", "Twilio\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Zillow\n7"], ["1 year - 2 years", "Expedia\n5"], ["1 year - 2 years", "Salesforce\n4"], ["1 year - 2 years", "Hulu\n4"], ["1 year - 2 years", "VMware\n4"], ["1 year - 2 years", "Citadel\n4"], ["1 year - 2 years", "Oracle\n3"], ["1 year - 2 years", "ByteDance\n3"], ["1 year - 2 years", "Nutanix\n2"], ["1 year - 2 years", "Goldman Sachs\n2"], ["1 year - 2 years", "Swiggy\n2"], ["1 year - 2 years", "Arcesium\n2"], ["1 year - 2 years", "Yelp"]]}], "problem": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One shortest transformation sequence is \"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; cog\", which is 5 words long.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 10</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 5000</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "String", "Breadth-First Search"], "similarQuestions": [{"questionName": "Word Ladder II", "difficulty": "Hard"}, {"questionName": "Minimum Genetic Mutation", "difficulty": "Medium"}, {"questionName": "Words Within Two Edits of Dictionary", "difficulty": "Medium"}], "problemName": "word-ladder"}