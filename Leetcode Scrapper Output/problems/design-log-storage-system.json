{"tags": [{"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Twitter\n5"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Amazon\n2"], ["1 year - 2 years", "Snapchat\n2"]]}], "problem": "<p>You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: <code>Year:Month:Day:Hour:Minute:Second</code>, for example, <code>2017:01:01:23:59:59</code>. All domains are zero-padded decimal numbers.</p>\n\n<p>Implement the <code>LogSystem</code> class:</p>\n\n<ul>\n\t<li><code>LogSystem()</code> Initializes the <code>LogSystem</code><b> </b>object.</li>\n\t<li><code>void put(int id, string timestamp)</code> Stores the given log <code>(id, timestamp)</code> in your storage system.</li>\n\t<li><code>int[] retrieve(string start, string end, string granularity)</code> Returns the IDs of the logs whose timestamps are within the range from <code>start</code> to <code>end</code> inclusive. <code>start</code> and <code>end</code> all have the same format as <code>timestamp</code>, and <code>granularity</code> means how precise the range should be (i.e. to the exact <code>Day</code>, <code>Minute</code>, etc.). For example, <code>start = \"2017:01:01:23:59:59\"</code>, <code>end = \"2017:01:02:23:59:59\"</code>, and <code>granularity = \"Day\"</code> means that we need to find the logs within the inclusive range from <strong>Jan. 1st 2017</strong> to <strong>Jan. 2nd 2017</strong>, and the <code>Hour</code>, <code>Minute</code>, and <code>Second</code> for each log entry can be ignored.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"LogSystem\", \"put\", \"put\", \"put\", \"retrieve\", \"retrieve\"]\n[[], [1, \"2017:01:01:23:59:59\"], [2, \"2017:01:01:22:59:59\"], [3, \"2016:01:01:00:00:00\"], [\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Year\"], [\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Hour\"]]\n<strong>Output</strong>\n[null, null, null, null, [3, 2, 1], [2, 1]]\n\n<strong>Explanation</strong>\nLogSystem logSystem = new LogSystem();\nlogSystem.put(1, \"2017:01:01:23:59:59\");\nlogSystem.put(2, \"2017:01:01:22:59:59\");\nlogSystem.put(3, \"2016:01:01:00:00:00\");\n\n// return [3,2,1], because you need to return all logs between 2016 and 2017.\nlogSystem.retrieve(\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Year\");\n\n// return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.\n// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.\nlogSystem.retrieve(\"2016:01:01:01:01:01\", \"2017:01:01:23:00:00\", \"Hour\");\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= id &lt;= 500</code></li>\n\t<li><code>2000 &lt;= Year &lt;= 2017</code></li>\n\t<li><code>1 &lt;= Month &lt;= 12</code></li>\n\t<li><code>1 &lt;= Day &lt;= 31</code></li>\n\t<li><code>0 &lt;= Hour &lt;= 23</code></li>\n\t<li><code>0 &lt;= Minute, Second &lt;= 59</code></li>\n\t<li><code>granularity</code> is one of the values <code>[\"Year\", \"Month\", \"Day\", \"Hour\", \"Minute\", \"Second\"]</code>.</li>\n\t<li>At most <code>500</code> calls will be made to <code>put</code> and <code>retrieve</code>.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "String", "Design", "Ordered Set"], "similarQuestions": [], "problemName": "design-log-storage-system"}