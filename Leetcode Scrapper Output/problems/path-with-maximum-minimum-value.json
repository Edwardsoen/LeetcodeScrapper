{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Google\n3"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "DoorDash\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Facebook\n5"], ["1 year - 2 years", "Amazon\n4"]]}], "problem": "<p>Given an <code>m x n</code> integer matrix <code>grid</code>, return <em>the maximum <strong>score</strong> of a path starting at </em><code>(0, 0)</code><em> and ending at </em><code>(m - 1, n - 1)</code> moving in the 4 cardinal directions.</p>\n\n<p>The <strong>score</strong> of a path is the minimum value in that path.</p>\n\n<ul>\n\t<li>For example, the score of the path <code>8 \u2192 4 \u2192 5 \u2192 9</code> is <code>4</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/05/maxgrid1.jpg\" style=\"width: 244px; height: 245px;\">\n<pre><strong>Input:</strong> grid = [[5,4,5],[1,2,6],[7,4,6]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The path with the maximum score is highlighted in yellow. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/05/maxgrid2.jpg\" style=\"width: 484px; height: 165px;\">\n<pre><strong>Input:</strong> grid = [[2,2,1,2,2,2],[1,2,2,2,1,2]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/05/maxgrid3.jpg\" style=\"width: 404px; height: 485px;\">\n<pre><strong>Input:</strong> grid = [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "relatedTopics": ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Heap (Priority Queue)", "Matrix"], "similarQuestions": [{"questionName": "Path With Minimum Effort", "difficulty": "Medium"}], "problemName": "path-with-maximum-minimum-value"}