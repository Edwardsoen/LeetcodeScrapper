{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Uber\n7"], ["0 - 6 months", "Amazon\n4"], ["0 - 6 months", "Expedia\n3"], ["0 - 6 months", "Microsoft\n2"], ["0 - 6 months", "Facebook\n2"], ["0 - 6 months", "eBay\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Apple\n2"], ["6 months - 1 year", "Google\n2"], ["6 months - 1 year", "Adobe\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "LinkedIn\n2"], ["1 year - 2 years", "Oracle\n2"], ["1 year - 2 years", "VMware\n2"], ["1 year - 2 years", "Citadel\n2"], ["1 year - 2 years", "Bloomberg"]]}], "problem": "<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest value (<strong>1-indexed</strong>) of all the values of the nodes in the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg\" style=\"width: 212px; height: 301px;\">\n<pre><strong>Input:</strong> root = [3,1,4,null,2], k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg\" style=\"width: 382px; height: 302px;\">\n<pre><strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p>\n", "relatedTopics": ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"], "similarQuestions": [{"questionName": "Binary Tree Inorder Traversal", "difficulty": "Easy"}, {"questionName": "Second Minimum Node In a Binary Tree", "difficulty": "Easy"}], "problemName": "kth-smallest-element-in-a-bst"}