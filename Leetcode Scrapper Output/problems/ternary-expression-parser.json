{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Snapchat"]]}], "problem": "<p>Given a string <code>expression</code> representing arbitrarily nested ternary expressions, evaluate the expression, and return <em>the result of it</em>.</p>\n\n<p>You can always assume that the given expression is valid and only contains digits, <code>'?'</code>, <code>':'</code>, <code>'T'</code>, and <code>'F'</code> where <code>'T'</code> is true and <code>'F'</code> is false. All the numbers in the expression are <strong>one-digit</strong> numbers (i.e., in the range <code>[0, 9]</code>).</p>\n\n<p>The conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, <code>'T'</code> or <code>'F'</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"T?2:3\"\n<strong>Output:</strong> \"2\"\n<strong>Explanation:</strong> If true, then result is 2; otherwise result is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"F?1:T?4:5\"\n<strong>Output:</strong> \"4\"\n<strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(F ? 1 : (T ? 4 : 5))\" --&gt; \"(F ? 1 : 4)\" --&gt; \"4\"\nor \"(F ? 1 : (T ? 4 : 5))\" --&gt; \"(T ? 4 : 5)\" --&gt; \"4\"\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"T?T?F:5:3\"\n<strong>Output:</strong> \"F\"\n<strong>Explanation:</strong> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(T ? (T ? F : 5) : 3)\" --&gt; \"(T ? F : 3)\" --&gt; \"F\"\n\"(T ? (T ? F : 5) : 3)\" --&gt; \"(T ? F : 5)\" --&gt; \"F\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>5 &lt;= expression.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>expression</code> consists of digits, <code>'T'</code>, <code>'F'</code>, <code>'?'</code>, and <code>':'</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that <code>expression</code> is a valid ternary expression and that each number is a <strong>one-digit number</strong>.</li>\n</ul>\n", "relatedTopics": ["String", "Stack", "Recursion"], "similarQuestions": [{"questionName": "Mini Parser", "difficulty": "Medium"}, {"questionName": "Remove Comments", "difficulty": "Medium"}, {"questionName": "Parse Lisp Expression", "difficulty": "Hard"}], "problemName": "ternary-expression-parser"}