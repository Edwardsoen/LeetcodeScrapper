{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Atlassian\n11"], ["0 - 6 months", "IXL\n2"], ["0 - 6 months", "Rubrik\n2"], ["0 - 6 months", "eBay\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Amazon\n6"], ["6 months - 1 year", "Google\n3"], ["6 months - 1 year", "Microsoft\n2"], ["6 months - 1 year", "Square\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "TikTok\n3"], ["1 year - 2 years", "Jane Street\n2"]]}], "problem": "<p>Design a <a href=\"https://en.wikipedia.org/wiki/Snake_(video_game)\" target=\"_blank\">Snake game</a> that is played on a device with screen size <code>height x width</code>. <a href=\"http://patorjk.com/games/snake/\" target=\"_blank\">Play the game online</a> if you are not familiar with the game.</p>\n\n<p>The snake is initially positioned at the top left corner <code>(0, 0)</code> with a length of <code>1</code> unit.</p>\n\n<p>You are given an array <code>food</code> where <code>food[i] = (r<sub>i</sub>, c<sub>i</sub>)</code> is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by <code>1</code>.</p>\n\n<p>Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.</p>\n\n<p>When a piece of food appears on the screen, it is <strong>guaranteed</strong> that it will not appear on a block occupied by the snake.</p>\n\n<p>The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies <strong>after</strong> moving (i.e. a snake of length 4 cannot run into itself).</p>\n\n<p>Implement the <code>SnakeGame</code> class:</p>\n\n<ul>\n\t<li><code>SnakeGame(int width, int height, int[][] food)</code> Initializes the object with a screen of size <code>height x width</code> and the positions of the <code>food</code>.</li>\n\t<li><code>int move(String direction)</code> Returns the score of the game after applying one <code>direction</code> move by the snake. If the game is over, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/13/snake.jpg\" style=\"width: 800px; height: 302px;\">\n<pre><strong>Input</strong>\n[\"SnakeGame\", \"move\", \"move\", \"move\", \"move\", \"move\", \"move\"]\n[[3, 2, [[1, 2], [0, 1]]], [\"R\"], [\"D\"], [\"R\"], [\"U\"], [\"L\"], [\"U\"]]\n<strong>Output</strong>\n[null, 0, 0, 1, 1, 2, -1]\n\n<strong>Explanation</strong>\nSnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);\nsnakeGame.move(\"R\"); // return 0\nsnakeGame.move(\"D\"); // return 0\nsnakeGame.move(\"R\"); // return 1, snake eats the first piece of food. The second piece of food appears at (0, 1).\nsnakeGame.move(\"U\"); // return 1\nsnakeGame.move(\"L\"); // return 2, snake eats the second food. No more food appears.\nsnakeGame.move(\"U\"); // return -1, game over because snake collides with border\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= width, height &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= food.length &lt;= 50</code></li>\n\t<li><code>food[i].length == 2</code></li>\n\t<li><code>0 &lt;= r<sub>i</sub> &lt; height</code></li>\n\t<li><code>0 &lt;= c<sub>i</sub> &lt; width</code></li>\n\t<li><code>direction.length == 1</code></li>\n\t<li><code>direction</code> is <code>'U'</code>, <code>'D'</code>, <code>'L'</code>, or <code>'R'</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>move</code>.</li>\n</ul>\n", "relatedTopics": [], "similarQuestions": [], "problemName": "design-snake-game"}