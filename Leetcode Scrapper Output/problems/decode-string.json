{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Bloomberg\n32"], ["0 - 6 months", "Google\n7"], ["0 - 6 months", "Amazon\n6"], ["0 - 6 months", "TikTok\n6"], ["0 - 6 months", "Adobe\n4"], ["0 - 6 months", "Uber\n3"], ["0 - 6 months", "Microsoft\n2"], ["0 - 6 months", "Yahoo\n2"], ["0 - 6 months", "ByteDance\n2"], ["0 - 6 months", "Square\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Facebook\n9"], ["6 months - 1 year", "Apple\n9"], ["6 months - 1 year", "Cisco\n7"], ["6 months - 1 year", "C3 IoT\n6"], ["6 months - 1 year", "Oracle\n5"], ["6 months - 1 year", "Snapchat\n2"], ["6 months - 1 year", "Salesforce\n2"], ["6 months - 1 year", "Cruise Automation\n2"], ["6 months - 1 year", "eBay\n2"], ["6 months - 1 year", "Qualtrics\n2"], ["6 months - 1 year", "Sumologic\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Intuit\n4"], ["1 year - 2 years", "HBO\n3"], ["1 year - 2 years", "Walmart Global Tech\n2"], ["1 year - 2 years", "SAP\n2"], ["1 year - 2 years", "Goldman Sachs\n2"], ["1 year - 2 years", "Arcesium\n2"], ["1 year - 2 years", "Jump Trading\n2"], ["1 year - 2 years", "Coupang"], ["1 year - 2 years", "Yelp"]]}], "problem": "<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"3[a]2[bc]\"\n<strong>Output:</strong> \"aaabcbc\"\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"3[a2[c]]\"\n<strong>Output:</strong> \"accaccacc\"\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"2[abc]3[cd]ef\"\n<strong>Output:</strong> \"abcabccdcdcdef\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>'[]'</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n", "relatedTopics": ["String", "Stack", "Recursion"], "similarQuestions": [], "problemName": "decode-string"}