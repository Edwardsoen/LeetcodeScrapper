{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Google\n18"], ["0 - 6 months", "Twilio\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Atlassian\n8"], ["6 months - 1 year", "Microsoft\n7"], ["6 months - 1 year", "Bloomberg\n3"], ["6 months - 1 year", "Amazon\n3"], ["6 months - 1 year", "Square\n3"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Apple\n7"], ["1 year - 2 years", "Netflix\n3"], ["1 year - 2 years", "Uber\n2"], ["1 year - 2 years", "Facebook\n2"], ["1 year - 2 years", "Citadel\n2"]]}], "problem": "<p>Design a logger system that receives a stream of messages along with their timestamps. Each <strong>unique</strong> message should only be printed <strong>at most every 10 seconds</strong> (i.e. a message printed at timestamp <code>t</code> will prevent other identical messages from being printed until timestamp <code>t + 10</code>).</p>\n\n<p>All messages will come in chronological order. Several messages may arrive at the same timestamp.</p>\n\n<p>Implement the <code>Logger</code> class:</p>\n\n<ul>\n\t<li><code>Logger()</code> Initializes the <code>logger</code> object.</li>\n\t<li><code>bool shouldPrintMessage(int timestamp, string message)</code> Returns <code>true</code> if the <code>message</code> should be printed in the given <code>timestamp</code>, otherwise returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"Logger\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\"]\n[[], [1, \"foo\"], [2, \"bar\"], [3, \"foo\"], [8, \"bar\"], [10, \"foo\"], [11, \"foo\"]]\n<strong>Output</strong>\n[null, true, true, false, false, false, true]\n\n<strong>Explanation</strong>\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1, \"foo\");  // return true, next allowed timestamp for \"foo\" is 1 + 10 = 11\nlogger.shouldPrintMessage(2, \"bar\");  // return true, next allowed timestamp for \"bar\" is 2 + 10 = 12\nlogger.shouldPrintMessage(3, \"foo\");  // 3 &lt; 11, return false\nlogger.shouldPrintMessage(8, \"bar\");  // 8 &lt; 12, return false\nlogger.shouldPrintMessage(10, \"foo\"); // 10 &lt; 11, return false\nlogger.shouldPrintMessage(11, \"foo\"); // 11 &gt;= 11, return true, next allowed timestamp for \"foo\" is 11 + 10 = 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li>\n\t<li>Every <code>timestamp</code> will be passed in non-decreasing order (chronological order).</li>\n\t<li><code>1 &lt;= message.length &lt;= 30</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>shouldPrintMessage</code>.</li>\n</ul>\n", "relatedTopics": ["Hash Table", "Design"], "similarQuestions": [], "problemName": "logger-rate-limiter"}