{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "AppDynamics\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Atlassian\n4"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Microsoft\n2"], ["1 year - 2 years", "Dunzo"]]}], "problem": "<p>You are given a list of strings of the <strong>same length</strong> <code>words</code> and a string <code>target</code>.</p>\n\n<p>Your task is to form <code>target</code> using the given <code>words</code> under the following rules:</p>\n\n<ul>\n\t<li><code>target</code> should be formed from left to right.</li>\n\t<li>To form the <code>i<sup>th</sup></code> character (<strong>0-indexed</strong>) of <code>target</code>, you can choose the <code>k<sup>th</sup></code> character of the <code>j<sup>th</sup></code> string in <code>words</code> if <code>target[i] = words[j][k]</code>.</li>\n\t<li>Once you use the <code>k<sup>th</sup></code> character of the <code>j<sup>th</sup></code> string of <code>words</code>, you <strong>can no longer</strong> use the <code>x<sup>th</sup></code> character of any string in <code>words</code> where <code>x &lt;= k</code>. In other words, all characters to the left of or at index <code>k</code> become unusuable for every string.</li>\n\t<li>Repeat the process until you form the string <code>target</code>.</li>\n</ul>\n\n<p><strong>Notice</strong> that you can use <strong>multiple characters</strong> from the <strong>same string</strong> in <code>words</code> provided the conditions above are met.</p>\n\n<p>Return <em>the number of ways to form <code>target</code> from <code>words</code></em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 ways to form target.\n\"aba\" -&gt; index 0 (\"<u>a</u>cca\"), index 1 (\"b<u>b</u>bb\"), index 3 (\"cac<u>a</u>\")\n\"aba\" -&gt; index 0 (\"<u>a</u>cca\"), index 2 (\"bb<u>b</u>b\"), index 3 (\"cac<u>a</u>\")\n\"aba\" -&gt; index 0 (\"<u>a</u>cca\"), index 1 (\"b<u>b</u>bb\"), index 3 (\"acc<u>a</u>\")\n\"aba\" -&gt; index 0 (\"<u>a</u>cca\"), index 2 (\"bb<u>b</u>b\"), index 3 (\"acc<u>a</u>\")\n\"aba\" -&gt; index 1 (\"c<u>a</u>ca\"), index 2 (\"bb<u>b</u>b\"), index 3 (\"acc<u>a</u>\")\n\"aba\" -&gt; index 1 (\"c<u>a</u>ca\"), index 2 (\"bb<u>b</u>b\"), index 3 (\"cac<u>a</u>\")\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> words = [\"abba\",\"baab\"], target = \"bab\"\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 ways to form target.\n\"bab\" -&gt; index 0 (\"<u>b</u>aab\"), index 1 (\"b<u>a</u>ab\"), index 2 (\"ab<u>b</u>a\")\n\"bab\" -&gt; index 0 (\"<u>b</u>aab\"), index 1 (\"b<u>a</u>ab\"), index 3 (\"baa<u>b</u>\")\n\"bab\" -&gt; index 0 (\"<u>b</u>aab\"), index 2 (\"ba<u>a</u>b\"), index 3 (\"baa<u>b</u>\")\n\"bab\" -&gt; index 1 (\"a<u>b</u>ba\"), index 2 (\"ba<u>a</u>b\"), index 3 (\"baa<u>b</u>\")\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n\t<li>All strings in <code>words</code> have the same length.</li>\n\t<li><code>1 &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> and <code>target</code> contain only lowercase English letters.</li>\n</ul>\n", "relatedTopics": [], "similarQuestions": [], "problemName": "number-of-ways-to-form-a-target-string-given-a-dictionary"}