{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Bloomberg\n4"], ["0 - 6 months", "Amazon\n2"], ["0 - 6 months", "Apple\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n12"], ["6 months - 1 year", "JPMorgan\n4"], ["6 months - 1 year", "Adobe\n2"], ["6 months - 1 year", "Airbnb\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Facebook\n9"], ["1 year - 2 years", "Google\n8"], ["1 year - 2 years", "Uber\n3"], ["1 year - 2 years", "Coursera\n2"], ["1 year - 2 years", "Zoho\n2"], ["1 year - 2 years", "Intuit\n2"], ["1 year - 2 years", "Sprinklr\n2"], ["1 year - 2 years", "instacart\n2"], ["1 year - 2 years", "Two Sigma"], ["1 year - 2 years", "Twitter"], ["1 year - 2 years", "Snapchat"]]}], "problem": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>'?'</code> and <code>'*'</code> where:</p>\n\n<ul>\n\t<li><code>'?'</code> Matches any single character.</li>\n\t<li><code>'*'</code> Matches any sequence of characters (including the empty sequence).</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"a\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \"a\" does not match the entire string \"aa\".\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"*\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;'*' matches any sequence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"cb\", p = \"?a\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>'?'</code> or <code>'*'</code>.</li>\n</ul>\n", "relatedTopics": ["String", "Dynamic Programming", "Greedy", "Recursion"], "similarQuestions": [{"questionName": "Regular Expression Matching", "difficulty": "Hard"}], "problemName": "wildcard-matching"}