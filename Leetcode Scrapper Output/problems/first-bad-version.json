{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n8"], ["0 - 6 months", "Adobe\n6"], ["0 - 6 months", "Google\n5"], ["0 - 6 months", "Apple\n4"], ["0 - 6 months", "Uber\n3"], ["0 - 6 months", "Facebook\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n7"], ["6 months - 1 year", "Yahoo\n3"], ["6 months - 1 year", "Expedia\n2"], ["6 months - 1 year", "Cisco\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Bloomberg\n6"], ["1 year - 2 years", "VMware\n4"], ["1 year - 2 years", "Oracle\n2"], ["1 year - 2 years", "Goldman Sachs\n2"]]}], "problem": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n\n<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n\n<p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> n = 5, bad = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)&nbsp;-&gt; true\ncall isBadVersion(4)&nbsp;-&gt; true\nThen 4 is the first bad version.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> n = 1, bad = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "relatedTopics": ["Binary Search", "Interactive"], "similarQuestions": [{"questionName": "Find First and Last Position of Element in Sorted Array", "difficulty": "Medium"}, {"questionName": "Search Insert Position", "difficulty": "Easy"}, {"questionName": "Guess Number Higher or Lower", "difficulty": "Easy"}], "problemName": "first-bad-version"}