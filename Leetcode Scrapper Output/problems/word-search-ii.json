{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Cisco\n11"], ["0 - 6 months", "Amazon\n10"], ["0 - 6 months", "Uber\n8"], ["0 - 6 months", "Bloomberg\n5"], ["0 - 6 months", "Microsoft\n3"], ["0 - 6 months", "Google\n3"], ["0 - 6 months", "Facebook\n2"], ["0 - 6 months", "Airbnb\n2"], ["0 - 6 months", "Apple\n2"], ["0 - 6 months", "Karat\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Indeed\n5"], ["6 months - 1 year", "Twitter\n4"], ["6 months - 1 year", "TikTok\n4"], ["6 months - 1 year", "Snapchat\n3"], ["6 months - 1 year", "ByteDance\n2"], ["6 months - 1 year", "Qualtrics\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Oracle\n3"], ["1 year - 2 years", "Goldman Sachs\n3"], ["1 year - 2 years", "Yahoo\n2"], ["1 year - 2 years", "Salesforce\n2"], ["1 year - 2 years", "Adobe\n2"], ["1 year - 2 years", "Twitch\n2"]]}], "problem": "<p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>\n\n<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" style=\"width: 322px; height: 322px;\">\n<pre><strong>Input:</strong> board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\n<strong>Output:</strong> [\"eat\",\"oath\"]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" style=\"width: 162px; height: 162px;\">\n<pre><strong>Input:</strong> board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>board[i][j]</code> is a lowercase English letter.</li>\n\t<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are unique.</li>\n</ul>\n", "relatedTopics": ["Array", "String", "Backtracking", "Trie", "Matrix"], "similarQuestions": [{"questionName": "Word Search", "difficulty": "Medium"}, {"questionName": "Unique Paths III", "difficulty": "Hard"}, {"questionName": "Encrypt and Decrypt Strings", "difficulty": "Hard"}], "problemName": "word-search-ii"}