{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Facebook"]]}], "problem": "<p>Table: <code>Friendship</code></p>\n\n<pre>+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user1_id      | int     |\n| user2_id      | int     |\n+---------------+---------+\n(user1_id, user2_id) is the primary key for this table.\nEach row of this table indicates that the users user1_id and user2_id are friends.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Likes</code></p>\n\n<pre>+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| page_id     | int     |\n+-------------+---------+\n(user_id, page_id) is the primary key for this table.\nEach row of this table indicates that user_id likes page_id.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>You are implementing a page recommendation system for a social media website. Your system will <strong>recommended</strong> a page to <code>user_id</code> if the page is <strong>liked</strong> by <strong>at least one</strong> friend of <code>user_id</code> and is <strong>not liked</strong> by <code>user_id</code>.</p>\n\n<p>Write an SQL query to find all the possible <strong>page recommendations</strong> for every user. Each recommendation should appear as a row in the result table with these columns:</p>\n\n<ul>\n\t<li><code>user_id</code>: The ID of the user that your system is making the recommendation to.</li>\n\t<li><code>page_id</code>: The ID of the page that will be recommended to <code>user_id</code>.</li>\n\t<li><code>friends_likes</code>: The number of the friends of <code>user_id</code> that like <code>page_id</code>.</li>\n</ul>\n\n<p>Return result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> \nFriendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 1        | 3        |\n| 1        | 4        |\n| 2        | 3        |\n| 2        | 4        |\n| 2        | 5        |\n| 6        | 1        |\n+----------+----------+\nLikes table:\n+---------+---------+\n| user_id | page_id |\n+---------+---------+\n| 1       | 88      |\n| 2       | 23      |\n| 3       | 24      |\n| 4       | 56      |\n| 5       | 11      |\n| 6       | 33      |\n| 2       | 77      |\n| 3       | 77      |\n| 6       | 88      |\n+---------+---------+\n<strong>Output:</strong> \n+---------+---------+---------------+\n| user_id | page_id | friends_likes |\n+---------+---------+---------------+\n| 1       | 77      | 2             |\n| 1       | 23      | 1             |\n| 1       | 24      | 1             |\n| 1       | 56      | 1             |\n| 1       | 33      | 1             |\n| 2       | 24      | 1             |\n| 2       | 56      | 1             |\n| 2       | 11      | 1             |\n| 2       | 88      | 1             |\n| 3       | 88      | 1             |\n| 3       | 23      | 1             |\n| 4       | 88      | 1             |\n| 4       | 77      | 1             |\n| 4       | 23      | 1             |\n| 5       | 77      | 1             |\n| 5       | 23      | 1             |\n+---------+---------+---------------+\n<strong>Explanation:</strong> \nTake user 1 as an example:\n  - User 1 is friends with users 2, 3, 4, and 6.\n  - Recommended pages are 23 (user 2 liked it), 24 (user 3 liked it), 56 (user 3 liked it), 33 (user 6 liked it), and 77 (user 2 and user 3 liked it).\n  - Note that page 88 is not recommended because user 1 already liked it.\n\nAnother example is user 6:\n  - User 6 is friends with user 1.\n  - User 1 only liked page 88, but user 6 already liked it. Hence, user 6 has no recommendations.\n\nYou can recommend pages for users 2, 3, 4, and 5 using a similar process.\n</pre>\n", "relatedTopics": ["Database"], "similarQuestions": [], "problemName": "page-recommendations-ii"}