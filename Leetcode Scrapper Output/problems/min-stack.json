{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n9"], ["0 - 6 months", "Bloomberg\n7"], ["0 - 6 months", "Expedia\n4"], ["0 - 6 months", "Microsoft\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Adobe\n3"], ["6 months - 1 year", "Apple\n3"], ["6 months - 1 year", "Facebook\n3"], ["6 months - 1 year", "Walmart Global Tech\n2"], ["6 months - 1 year", "Oracle\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "VMware\n5"], ["1 year - 2 years", "Google\n4"], ["1 year - 2 years", "Goldman Sachs\n4"], ["1 year - 2 years", "Salesforce\n4"], ["1 year - 2 years", "Lyft\n2"], ["1 year - 2 years", "Cisco\n2"], ["1 year - 2 years", "Yahoo\n2"], ["1 year - 2 years", "Airtel\n2"], ["1 year - 2 years", "Arcesium\n2"], ["1 year - 2 years", "Uber"], ["1 year - 2 years", "Snapchat"], ["1 year - 2 years", "Zenefits"]]}], "problem": "<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n\n<p>Implement the <code>MinStack</code> class:</p>\n\n<ul>\n\t<li><code>MinStack()</code> initializes the stack object.</li>\n\t<li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li>\n\t<li><code>void pop()</code> removes the element on the top of the stack.</li>\n\t<li><code>int top()</code> gets the top element of the stack.</li>\n\t<li><code>int getMin()</code> retrieves the minimum element in the stack.</li>\n</ul>\n\n<p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\n<strong>Output</strong>\n[null,null,null,null,-3,null,0,-2]\n\n<strong>Explanation</strong>\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li>\n</ul>\n", "relatedTopics": ["Stack", "Design"], "similarQuestions": [], "problemName": "min-stack"}