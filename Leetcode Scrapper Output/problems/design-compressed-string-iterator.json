{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Google\n2"]]}], "problem": "<p>Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.</p>\n\n<p>Implement the&nbsp;StringIterator class:</p>\n\n<ul>\n\t<li><code>next()</code>&nbsp;Returns <strong>the next character</strong> if the original string still has uncompressed characters, otherwise returns a <strong>white space</strong>.</li>\n\t<li><code>hasNext()</code>&nbsp;Returns true if&nbsp;there is any letter needs to be uncompressed in the original string, otherwise returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"StringIterator\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"L1e2t1C1o1d1e1\"], [], [], [], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, \"L\", \"e\", \"e\", \"t\", \"C\", \"o\", true, \"d\", true]\n\n<strong>Explanation</strong>\nStringIterator stringIterator = new StringIterator(\"L1e2t1C1o1d1e1\");\nstringIterator.next(); // return \"L\"\nstringIterator.next(); // return \"e\"\nstringIterator.next(); // return \"e\"\nstringIterator.next(); // return \"t\"\nstringIterator.next(); // return \"C\"\nstringIterator.next(); // return \"o\"\nstringIterator.hasNext(); // return True\nstringIterator.next(); // return \"d\"\nstringIterator.hasNext(); // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;compressedString.length &lt;= 1000</code></li>\n\t<li><code>compressedString</code> consists of lower-case an upper-case English letters and digits.</li>\n\t<li>The number of a single character repetitions in&nbsp;<code>compressedString</code> is in the range <code>[1, 10^9]</code></li>\n\t<li>At most <code>100</code> calls will be made to <code>next</code> and <code>hasNext</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Hash Table", "String", "Design", "Iterator"], "similarQuestions": [{"questionName": "LRU Cache", "difficulty": "Medium"}, {"questionName": "String Compression", "difficulty": "Medium"}], "problemName": "design-compressed-string-iterator"}