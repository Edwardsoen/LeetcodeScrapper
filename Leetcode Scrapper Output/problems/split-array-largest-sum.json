{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n3"], ["0 - 6 months", "Google\n3"], ["0 - 6 months", "Hudson River Trading\n3"], ["0 - 6 months", "HRT\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "TikTok\n5"], ["6 months - 1 year", "Apple\n3"], ["6 months - 1 year", "ByteDance\n2"], ["6 months - 1 year", "Facebook\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Directi\n3"], ["1 year - 2 years", "Salesforce\n3"], ["1 year - 2 years", "Baidu"]]}], "problem": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is <strong>minimized</strong>.</p>\n\n<p>Return <em>the minimized largest sum of the split</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous part of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [7,2,5,10,8], k = 2\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [1,2,3,4,5], k = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li>\n</ul>\n", "relatedTopics": ["Array", "Binary Search", "Dynamic Programming", "Greedy"], "similarQuestions": [], "problemName": "split-array-largest-sum"}