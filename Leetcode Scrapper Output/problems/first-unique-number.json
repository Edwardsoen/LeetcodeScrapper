{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n3"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Docusign\n4"], ["1 year - 2 years", "Facebook\n2"], ["1 year - 2 years", "Bloomberg\n2"]]}], "problem": "<p>You have a queue of integers, you need to retrieve the first unique integer in the queue.</p>\n\n<p>Implement the <code>FirstUnique</code>&nbsp;class:</p>\n\n<ul>\n\t<li><code>FirstUnique(int[] nums)</code> Initializes the object with the numbers in the queue.</li>\n\t<li><code>int showFirstUnique()</code>&nbsp;returns the value of <strong>the&nbsp;first unique</strong> integer of the queue, and returns <strong>-1</strong> if there is no such integer.</li>\n\t<li><code>void add(int value)</code>&nbsp;insert value&nbsp;to&nbsp;the queue.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><b>Input: </b>\n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[2,3,5]],[],[5],[],[2],[],[3],[]]\n<b>Output: </b>\n[null,2,null,2,null,3,null,-1]\n<b>Explanation: </b>\nFirstUnique firstUnique = new FirstUnique([2,3,5]);\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(5);            // the queue is now [2,3,5,5]\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(2);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [2,3,5,5,2]\nfirstUnique.showFirstUnique(); // return 3\nfirstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [2,3,5,5,2,3]\nfirstUnique.showFirstUnique(); // return -1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><b>Input: </b>\n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"add\",\"add\",\"add\",\"add\",\"showFirstUnique\"]\n[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]\n<b>Output: </b>\n[null,-1,null,null,null,null,null,17]\n<b>Explanation: </b>\nFirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);\nfirstUnique.showFirstUnique(); // return -1\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]\nfirstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [7,7,7,7,7,7,7,3]\nfirstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [7,7,7,7,7,7,7,3,3]\nfirstUnique.add(7);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the queue is now [7,7,7,7,7,7,7,3,3,7]\nfirstUnique.add(17);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// the queue is now [7,7,7,7,7,7,7,3,3,7,17]\nfirstUnique.showFirstUnique(); // return 17\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><b>Input: </b>\n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[809]],[],[809],[]]\n<b>Output: </b>\n[null,809,null,-1]\n<b>Explanation: </b>\nFirstUnique firstUnique = new FirstUnique([809]);\nfirstUnique.showFirstUnique(); // return 809\nfirstUnique.add(809);          // the queue is now [809,809]\nfirstUnique.showFirstUnique(); // return -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10^8</code></li>\n\t<li><code>1 &lt;= value &lt;= 10^8</code></li>\n\t<li>At most <code>50000</code>&nbsp;calls will be made to <code>showFirstUnique</code>&nbsp;and <code>add</code>.</li>\n</ul>\n", "relatedTopics": [], "similarQuestions": [], "problemName": "first-unique-number"}