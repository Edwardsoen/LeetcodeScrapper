{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Google\n3"], ["1 year - 2 years", "Amazon\n2"]]}], "problem": "<p>You are given a string <code>s</code> representing a list of words. Each letter in the word has one or more options.</p>\n\n<ul>\n\t<li>If there is one option, the letter is represented as is.</li>\n\t<li>If there is more than one option, then curly braces delimit the options. For example, <code>\"{a,b,c}\"</code> represents options <code>[\"a\", \"b\", \"c\"]</code>.</li>\n</ul>\n\n<p>For example, if <code>s = \"a{b,c}\"</code>, the first character is always <code>'a'</code>, but the second character can be <code>'b'</code> or <code>'c'</code>. The original list is <code>[\"ab\", \"ac\"]</code>.</p>\n\n<p>Return all words that can be formed in this manner, <strong>sorted</strong> in lexicographical order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"{a,b}c{d,e}f\"\n<strong>Output:</strong> [\"acdf\",\"acef\",\"bcdf\",\"bcef\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> [\"abcd\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>s</code> consists of curly brackets <code>'{}'</code>, commas&nbsp;<code>','</code>, and lowercase English letters.</li>\n\t<li><code>s</code> is guaranteed to be a valid input.</li>\n\t<li>There are no nested curly brackets.</li>\n\t<li>All characters inside a pair of consecutive opening and ending curly brackets are different.</li>\n</ul>\n", "relatedTopics": ["String", "Backtracking", "Breadth-First Search"], "similarQuestions": [{"questionName": "Decode String", "difficulty": "Medium"}, {"questionName": "Letter Case Permutation", "difficulty": "Medium"}, {"questionName": "Brace Expansion II", "difficulty": "Hard"}], "problemName": "brace-expansion"}