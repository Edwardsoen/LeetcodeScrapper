{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n2"], ["0 - 6 months", "Apple\n2"], ["0 - 6 months", "Bloomberg\n2"], ["0 - 6 months", "Box\n2"], ["0 - 6 months", "Intel\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Qualcomm\n6"], ["6 months - 1 year", "Adobe\n5"], ["6 months - 1 year", "Facebook\n4"], ["6 months - 1 year", "Microsoft\n4"], ["6 months - 1 year", "Cisco\n3"], ["6 months - 1 year", "Google\n2"], ["6 months - 1 year", "MindTickle\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Yahoo\n2"], ["1 year - 2 years", "Oracle\n2"]]}], "problem": "<p>Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\">Hamming weight</a>).</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li>\n\t<li>In Java, the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2's complement notation</a>. Therefore, in <strong class=\"example\">Example 3</strong>, the input represents the signed integer. <code>-3</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> n = 00000000000000000000000000001011\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three '1' bits.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> n = 00000000000000000000000010000000\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one '1' bit.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> n = 11111111111111111111111111111101\n<strong>Output:</strong> 31\n<strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one '1' bits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input must be a <strong>binary string</strong> of length <code>32</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If this function is called many times, how would you optimize it?", "relatedTopics": ["Divide and Conquer", "Bit Manipulation"], "similarQuestions": [{"questionName": "Reverse Bits", "difficulty": "Easy"}, {"questionName": "Power of Two", "difficulty": "Easy"}, {"questionName": "Counting Bits", "difficulty": "Easy"}, {"questionName": "Binary Watch", "difficulty": "Easy"}, {"questionName": "Hamming Distance", "difficulty": "Easy"}, {"questionName": "Binary Number with Alternating Bits", "difficulty": "Easy"}, {"questionName": "Prime Number of Set Bits in Binary Representation", "difficulty": "Easy"}], "problemName": "number-of-1-bits"}