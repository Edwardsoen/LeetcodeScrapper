{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Flipkart\n7"], ["1 year - 2 years", "Apple\n2"], ["1 year - 2 years", "Microsoft"]]}], "problem": "<p>The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers <code>0</code> and <code>1</code> respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.</p>\n\n<p>The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a <strong>stack</strong>. At each step:</p>\n\n<ul>\n\t<li>If the student at the front of the queue <strong>prefers</strong> the sandwich on the top of the stack, they will <strong>take it</strong> and leave the queue.</li>\n\t<li>Otherwise, they will <strong>leave it</strong> and go to the queue's end.</li>\n</ul>\n\n<p>This continues until none of the queue students want to take the top sandwich and are thus unable to eat.</p>\n\n<p>You are given two integer arrays <code>students</code> and <code>sandwiches</code> where <code>sandwiches[i]</code> is the type of the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code> sandwich in the stack (<code>i = 0</code> is the top of the stack) and <code>students[j]</code> is the preference of the <code>j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code> student in the initial queue (<code>j = 0</code> is the front of the queue). Return <em>the number of students that are unable to eat.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> students = [1,1,0,0], sandwiches = [0,1,0,1]\n<strong>Output:</strong> 0<strong> \nExplanation:</strong>\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= students.length, sandwiches.length &lt;= 100</code></li>\n\t<li><code>students.length == sandwiches.length</code></li>\n\t<li><code>sandwiches[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>students[i]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Stack", "Queue", "Simulation"], "similarQuestions": [{"questionName": "Time Needed to Buy Tickets", "difficulty": "Easy"}], "problemName": "number-of-students-unable-to-eat-lunch"}