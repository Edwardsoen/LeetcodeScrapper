{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n82"], ["0 - 6 months", "Adobe\n43"], ["0 - 6 months", "Apple\n36"], ["0 - 6 months", "Google\n27"], ["0 - 6 months", "Bloomberg\n21"], ["0 - 6 months", "Microsoft\n11"], ["0 - 6 months", "Facebook\n11"], ["0 - 6 months", "Accenture\n6"], ["0 - 6 months", "Uber\n5"], ["0 - 6 months", "Expedia\n5"], ["0 - 6 months", "Spotify\n4"], ["0 - 6 months", "Oracle\n4"], ["0 - 6 months", "Goldman Sachs\n3"], ["0 - 6 months", "Yahoo\n3"], ["0 - 6 months", "eBay\n3"], ["0 - 6 months", "Cisco\n3"], ["0 - 6 months", "tcs\n3"], ["0 - 6 months", "Samsung\n2"], ["0 - 6 months", "Yandex\n2"], ["0 - 6 months", "Nagarro\n2"], ["0 - 6 months", "Zillow\n2"], ["0 - 6 months", "Visa\n2"], ["0 - 6 months", "Infosys\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Zoho\n7"], ["6 months - 1 year", "Morgan Stanley\n5"], ["6 months - 1 year", "JPMorgan\n4"], ["6 months - 1 year", "MakeMyTrip\n4"], ["6 months - 1 year", "American Express\n4"], ["6 months - 1 year", "Walmart Global Tech\n3"], ["6 months - 1 year", "Qualcomm\n3"], ["6 months - 1 year", "Zoom\n3"], ["6 months - 1 year", "SAP\n2"], ["6 months - 1 year", "IBM\n2"], ["6 months - 1 year", "Nvidia\n2"], ["6 months - 1 year", "VMware\n2"], ["6 months - 1 year", "FactSet\n2"], ["6 months - 1 year", "Dell\n2"], ["6 months - 1 year", "Twitch\n2"], ["6 months - 1 year", "Accolite\n2"], ["6 months - 1 year", "Siemens\n2"], ["6 months - 1 year", "Zomato\n2"], ["6 months - 1 year", "Info Edge\n2"], ["6 months - 1 year", "Capgemini\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Paypal\n9"], ["1 year - 2 years", "Intel\n7"], ["1 year - 2 years", "Salesforce\n5"], ["1 year - 2 years", "ServiceNow\n4"], ["1 year - 2 years", "Twitter\n3"], ["1 year - 2 years", "Square\n3"], ["1 year - 2 years", "Snapchat\n3"], ["1 year - 2 years", "Citadel\n3"], ["1 year - 2 years", "BlackRock\n2"], ["1 year - 2 years", "Grab\n2"], ["1 year - 2 years", "Intuit\n2"], ["1 year - 2 years", "Citrix\n2"], ["1 year - 2 years", "Wayfair\n2"], ["1 year - 2 years", "Akamai\n2"], ["1 year - 2 years", "GoDaddy\n2"], ["1 year - 2 years", "Deutsche Bank\n2"], ["1 year - 2 years", "Capital One\n2"], ["1 year - 2 years", "Splunk\n2"], ["1 year - 2 years", "PayTM\n2"], ["1 year - 2 years", "ZScaler\n2"], ["1 year - 2 years", "United Health Group\n2"], ["1 year - 2 years", "Optum\n2"], ["1 year - 2 years", "Epam Systems\n2"], ["1 year - 2 years", "Arcesium\n2"], ["1 year - 2 years", "Tesla\n2"], ["1 year - 2 years", "Cognizant\n2"], ["1 year - 2 years", "LinkedIn"], ["1 year - 2 years", "Airbnb"], ["1 year - 2 years", "Yelp"], ["1 year - 2 years", "Dropbox"]]}], "problem": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?", "relatedTopics": ["Array", "Hash Table"], "similarQuestions": [], "problemName": "two-sum"}