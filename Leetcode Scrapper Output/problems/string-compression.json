{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Apple\n3"], ["0 - 6 months", "Expedia\n2"], ["0 - 6 months", "Amazon\n2"], ["0 - 6 months", "Yandex\n2"], ["0 - 6 months", "Redfin\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n10"], ["6 months - 1 year", "Goldman Sachs\n9"], ["6 months - 1 year", "Bloomberg\n4"], ["6 months - 1 year", "Facebook\n4"], ["6 months - 1 year", "Yahoo\n3"], ["6 months - 1 year", "instacart\n3"], ["6 months - 1 year", "Google\n2"], ["6 months - 1 year", "Visa\n2"], ["6 months - 1 year", "Twitter\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "eBay\n4"], ["1 year - 2 years", "IBM\n4"], ["1 year - 2 years", "Adobe\n3"], ["1 year - 2 years", "Nvidia\n3"], ["1 year - 2 years", "Nutanix\n2"], ["1 year - 2 years", "Oracle\n2"], ["1 year - 2 years", "VMware\n2"], ["1 year - 2 years", "Cisco\n2"], ["1 year - 2 years", "GoDaddy"], ["1 year - 2 years", "Snapchat"], ["1 year - 2 years", "Yelp"], ["1 year - 2 years", "Lyft"]]}], "problem": "<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group's length is <code>1</code>, append the character to <code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group's length.</li>\n</ul>\n\n<p>The compressed string <code>s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code>chars</code></strong>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p>\n\n<p>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</p>\n\n<p>You must write an algorithm that uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n<strong>Explanation:</strong> The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> chars = [\"a\"]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [\"a\"]\n<strong>Explanation:</strong> The only group is \"a\", which remains uncompressed since it's a single character.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\n<strong>Explanation:</strong> The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li>\n</ul>\n", "relatedTopics": ["Two Pointers", "String"], "similarQuestions": [], "problemName": "string-compression"}