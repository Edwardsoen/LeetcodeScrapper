{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Databricks\n6"], ["0 - 6 months", "Amazon\n4"], ["0 - 6 months", "Reddit\n4"], ["0 - 6 months", "Google\n3"], ["0 - 6 months", "Apple\n3"], ["0 - 6 months", "Uber\n2"], ["0 - 6 months", "Karat\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Affirm\n10"], ["6 months - 1 year", "Twitter\n7"], ["6 months - 1 year", "Microsoft\n5"], ["6 months - 1 year", "Yahoo\n2"], ["6 months - 1 year", "Atlassian\n2"], ["6 months - 1 year", "Jane Street\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Zillow\n6"], ["1 year - 2 years", "Yandex\n5"], ["1 year - 2 years", "Pinterest\n4"], ["1 year - 2 years", "Indeed\n2"], ["1 year - 2 years", "Snapchat\n2"], ["1 year - 2 years", "VMware\n2"], ["1 year - 2 years", "Dropbox"]]}], "problem": "<p>Design a hit counter which counts the number of hits received in the past <code>5</code> minutes (i.e., the past <code>300</code> seconds).</p>\n\n<p>Your system should accept a <code>timestamp</code> parameter (<strong>in seconds</strong> granularity), and you may assume that calls are being made to the system in chronological order (i.e., <code>timestamp</code> is monotonically increasing). Several hits may arrive roughly at the same time.</p>\n\n<p>Implement the <code>HitCounter</code> class:</p>\n\n<ul>\n\t<li><code>HitCounter()</code> Initializes the object of the hit counter system.</li>\n\t<li><code>void hit(int timestamp)</code> Records a hit that happened at <code>timestamp</code> (<strong>in seconds</strong>). Several hits may happen at the same <code>timestamp</code>.</li>\n\t<li><code>int getHits(int timestamp)</code> Returns the number of hits in the past 5 minutes from <code>timestamp</code> (i.e., the past <code>300</code> seconds).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"HitCounter\", \"hit\", \"hit\", \"hit\", \"getHits\", \"hit\", \"getHits\", \"getHits\"]\n[[], [1], [2], [3], [4], [300], [300], [301]]\n<strong>Output</strong>\n[null, null, null, null, 3, null, 4, 3]\n\n<strong>Explanation</strong>\nHitCounter hitCounter = new HitCounter();\nhitCounter.hit(1);       // hit at timestamp 1.\nhitCounter.hit(2);       // hit at timestamp 2.\nhitCounter.hit(3);       // hit at timestamp 3.\nhitCounter.getHits(4);   // get hits at timestamp 4, return 3.\nhitCounter.hit(300);     // hit at timestamp 300.\nhitCounter.getHits(300); // get hits at timestamp 300, return 4.\nhitCounter.getHits(301); // get hits at timestamp 301, return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= timestamp &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li>All the calls are being made to the system in chronological order (i.e., <code>timestamp</code> is monotonically increasing).</li>\n\t<li>At most <code>300</code> calls will be made to <code>hit</code> and <code>getHits</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if the number of hits per second could be huge? Does your design scale?</p>\n", "relatedTopics": ["Array", "Hash Table", "Binary Search", "Design", "Queue"], "similarQuestions": [], "problemName": "design-hit-counter"}