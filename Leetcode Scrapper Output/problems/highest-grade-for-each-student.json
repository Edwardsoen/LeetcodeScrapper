{"tags": [{"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Amazon\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Coursera"]]}], "problem": "<p>Table: <code>Enrollments</code></p>\n\n<pre>+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| student_id    | int     |\n| course_id     | int     |\n| grade         | int     |\n+---------------+---------+\n(student_id, course_id) is the primary key of this table.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest <code>course_id</code>.</p>\n\n<p>Return the result table ordered by <code>student_id</code> in <strong>ascending order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> \nEnrollments table:\n+------------+-------------------+\n| student_id | course_id | grade |\n+------------+-----------+-------+\n| 2          | 2         | 95    |\n| 2          | 3         | 95    |\n| 1          | 1         | 90    |\n| 1          | 2         | 99    |\n| 3          | 1         | 80    |\n| 3          | 2         | 75    |\n| 3          | 3         | 82    |\n+------------+-----------+-------+\n<strong>Output:</strong> \n+------------+-------------------+\n| student_id | course_id | grade |\n+------------+-----------+-------+\n| 1          | 2         | 99    |\n| 2          | 2         | 95    |\n| 3          | 3         | 82    |\n+------------+-----------+-------+\n</pre>\n", "relatedTopics": ["Database"], "similarQuestions": [{"questionName": "Department Highest Salary", "difficulty": "Medium"}], "problemName": "highest-grade-for-each-student"}