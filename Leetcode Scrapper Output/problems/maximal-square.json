{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "TikTok\n4"], ["0 - 6 months", "Amazon\n3"], ["0 - 6 months", "Google\n3"], ["0 - 6 months", "Apple\n3"], ["0 - 6 months", "Adobe\n2"], ["0 - 6 months", "Paypal\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Microsoft\n6"], ["6 months - 1 year", "Booking.com\n2"], ["6 months - 1 year", "Visa\n2"], ["6 months - 1 year", "MindTickle\n2"], ["6 months - 1 year", "Epam Systems\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Twitter\n11"], ["1 year - 2 years", "IBM\n10"], ["1 year - 2 years", "eBay\n6"], ["1 year - 2 years", "ByteDance\n4"], ["1 year - 2 years", "Salesforce\n4"], ["1 year - 2 years", "Walmart Global Tech\n2"], ["1 year - 2 years", "FactSet\n2"], ["1 year - 2 years", "Goldman Sachs\n2"], ["1 year - 2 years", "Nvidia\n2"], ["1 year - 2 years", "ServiceNow\n2"], ["1 year - 2 years", "Indeed\n2"], ["1 year - 2 years", "Flipkart\n2"], ["1 year - 2 years", "Airbnb"], ["1 year - 2 years", "Facebook"]]}], "problem": "<p>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>'s and <code>1</code>'s, <em>find the largest square containing only</em> <code>1</code>'s <em>and return its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\" style=\"width: 400px; height: 319px;\">\n<pre><strong>Input:</strong> matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\" style=\"width: 165px; height: 165px;\">\n<pre><strong>Input:</strong> matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> matrix = [[\"0\"]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Dynamic Programming", "Matrix"], "similarQuestions": [{"questionName": "Maximal Rectangle", "difficulty": "Hard"}, {"questionName": "Largest Plus Sign", "difficulty": "Medium"}, {"questionName": "Count Artifacts That Can Be Extracted", "difficulty": "Medium"}, {"questionName": "Stamping the Grid", "difficulty": "Hard"}], "problemName": "maximal-square"}