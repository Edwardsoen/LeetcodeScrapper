{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Google"]]}], "problem": "<p>The <strong>abbreviation</strong> of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an <strong>abbreviation</strong> of itself.</p>\n\n<p>For example:</p>\n\n<ul>\n\t<li><code>dog --&gt; d1g</code> because there is one letter between the first letter <code>'d'</code> and the last letter <code>'g'</code>.</li>\n\t<li><code>internationalization --&gt; i18n</code> because there are 18 letters between the first letter <code>'i'</code> and the last letter <code>'n'</code>.</li>\n\t<li><code>it --&gt; it</code> because any word with only two characters is an <strong>abbreviation</strong> of itself.</li>\n</ul>\n\n<p>Implement the <code>ValidWordAbbr</code> class:</p>\n\n<ul>\n\t<li><code>ValidWordAbbr(String[] dictionary)</code> Initializes the object with a <code>dictionary</code> of words.</li>\n\t<li><code>boolean isUnique(string word)</code> Returns <code>true</code> if <strong>either</strong> of the following conditions are met (otherwise returns <code>false</code>):\n\t<ul>\n\t\t<li>There is no word in <code>dictionary</code> whose <strong>abbreviation</strong> is equal to <code>word</code>'s <strong>abbreviation</strong>.</li>\n\t\t<li>For any word in <code>dictionary</code> whose <strong>abbreviation</strong> is equal to <code>word</code>'s <strong>abbreviation</strong>, that word and <code>word</code> are <strong>the same</strong>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"ValidWordAbbr\", \"isUnique\", \"isUnique\", \"isUnique\", \"isUnique\", \"isUnique\"]\n[[[\"deer\", \"door\", \"cake\", \"card\"]], [\"dear\"], [\"cart\"], [\"cane\"], [\"make\"], [\"cake\"]]\n<strong>Output</strong>\n[null, false, true, false, true, true]\n\n<strong>Explanation</strong>\nValidWordAbbr validWordAbbr = new ValidWordAbbr([\"deer\", \"door\", \"cake\", \"card\"]);\nvalidWordAbbr.isUnique(\"dear\"); // return false, dictionary word \"deer\" and word \"dear\" have the same abbreviation \"d2r\" but are not the same.\nvalidWordAbbr.isUnique(\"cart\"); // return true, no words in the dictionary have the abbreviation \"c2t\".\nvalidWordAbbr.isUnique(\"cane\"); // return false, dictionary word \"cake\" and word \"cane\" have the same abbreviation  \"c2e\" but are not the same.\nvalidWordAbbr.isUnique(\"make\"); // return true, no words in the dictionary have the abbreviation \"m2e\".\nvalidWordAbbr.isUnique(\"cake\"); // return true, because \"cake\" is already in the dictionary and no other word in the dictionary has \"c2e\" abbreviation.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dictionary.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 20</code></li>\n\t<li><code>dictionary[i]</code> consists of lowercase English letters.</li>\n\t<li><code>1 &lt;= word.length &lt;= 20</code></li>\n\t<li><code>word</code> consists of lowercase English letters.</li>\n\t<li>At most <code>5000</code> calls will be made to <code>isUnique</code>.</li>\n</ul>\n", "relatedTopics": ["Array", "Hash Table", "String", "Design"], "similarQuestions": [], "problemName": "unique-word-abbreviation"}