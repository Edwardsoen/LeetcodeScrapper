{"tags": [{"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Square"]]}], "problem": "<p>A <code>width x height</code> grid is on an XY-plane with the <strong>bottom-left</strong> cell at <code>(0, 0)</code> and the <strong>top-right</strong> cell at <code>(width - 1, height - 1)</code>. The grid is aligned with the four cardinal directions (<code>\"North\"</code>, <code>\"East\"</code>, <code>\"South\"</code>, and <code>\"West\"</code>). A robot is <strong>initially</strong> at cell <code>(0, 0)</code> facing direction <code>\"East\"</code>.</p>\n\n<p>The robot can be instructed to move for a specific number of <strong>steps</strong>. For each step, it does the following.</p>\n\n<ol>\n\t<li>Attempts to move <strong>forward one</strong> cell in the direction it is facing.</li>\n\t<li>If the cell the robot is <strong>moving to</strong> is <strong>out of bounds</strong>, the robot instead <strong>turns</strong> 90 degrees <strong>counterclockwise</strong> and retries the step.</li>\n</ol>\n\n<p>After the robot finishes moving the number of steps required, it stops and awaits the next instruction.</p>\n\n<p>Implement the <code>Robot</code> class:</p>\n\n<ul>\n\t<li><code>Robot(int width, int height)</code> Initializes the <code>width x height</code> grid with the robot at <code>(0, 0)</code> facing <code>\"East\"</code>.</li>\n\t<li><code>void step(int num)</code> Instructs the robot to move forward <code>num</code> steps.</li>\n\t<li><code>int[] getPos()</code> Returns the current cell the robot is at, as an array of length 2, <code>[x, y]</code>.</li>\n\t<li><code>String getDir()</code> Returns the current direction of the robot, <code>\"North\"</code>, <code>\"East\"</code>, <code>\"South\"</code>, or <code>\"West\"</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/10/09/example-1.png\" style=\"width: 498px; height: 268px;\">\n<pre><strong>Input</strong>\n[\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]\n<strong>Output</strong>\n[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]\n\n<strong>Explanation</strong>\nRobot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.step(2);  // It moves two steps East to (2, 0), and faces East.\nrobot.step(2);  // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return \"East\"\nrobot.step(2);  // It moves one step East to (5, 0), and faces East.\n                // Moving the next step East would be out of bounds, so it turns and faces North.\n                // Then, it moves one step North to (5, 1), and faces North.\nrobot.step(1);  // It moves one step North to (5, 2), and faces <strong>North</strong> (not West).\nrobot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.\n                // Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return \"West\"\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= width, height &lt;= 100</code></li>\n\t<li><code>1 &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>step</code>, <code>getPos</code>, and <code>getDir</code>.</li>\n</ul>\n", "relatedTopics": ["Design", "Simulation"], "similarQuestions": [{"questionName": "Walking Robot Simulation", "difficulty": "Medium"}], "problemName": "walking-robot-simulation-ii"}