{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Amazon\n4"], ["0 - 6 months", "Microsoft\n4"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Facebook\n9"], ["6 months - 1 year", "Google\n8"], ["6 months - 1 year", "Bloomberg\n4"], ["6 months - 1 year", "Nvidia\n3"], ["6 months - 1 year", "Adobe\n2"], ["6 months - 1 year", "Apple\n2"], ["6 months - 1 year", "Uber\n2"], ["6 months - 1 year", "Yahoo\n2"], ["6 months - 1 year", "JPMorgan\n2"], ["6 months - 1 year", "instacart\n2"]]}, {"duration": "1 year - 2 years", "companies": [["1 year - 2 years", "Coursera\n7"], ["1 year - 2 years", "Snapchat\n2"], ["1 year - 2 years", "eBay\n2"], ["1 year - 2 years", "Tesla\n2"], ["1 year - 2 years", "PayTM\n2"], ["1 year - 2 years", "Twitter"], ["1 year - 2 years", "Airbnb"]]}], "problem": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:</p>\n\n<ul>\n\t<li><code>'.'</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>'*'</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"a\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \"a\" does not match the entire string \"aa\".\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"a*\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"ab\", p = \".*\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \".*\" means \"zero or more (*) of any character (.)\".\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 30</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and&nbsp;<code>'*'</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li>\n</ul>\n", "relatedTopics": ["String", "Dynamic Programming", "Recursion"], "similarQuestions": [{"questionName": "Wildcard Matching", "difficulty": "Hard"}], "problemName": "regular-expression-matching"}