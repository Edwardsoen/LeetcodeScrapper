{"tags": [{"duration": "0 - 6 months", "companies": [["0 - 6 months", "Bloomberg\n2"]]}, {"duration": "6 months - 1 year", "companies": [["6 months - 1 year", "Google\n2"]]}], "problem": "<p>Design a queue-like data structure that moves the most recently used element to the end of the queue.</p>\n\n<p>Implement the <code>MRUQueue</code> class:</p>\n\n<ul>\n\t<li><code>MRUQueue(int n)</code> constructs the <code>MRUQueue</code> with <code>n</code> elements: <code>[1,2,3,...,n]</code>.</li>\n\t<li><code>int fetch(int k)</code> moves the <code>k<sup>th</sup></code> element <strong>(1-indexed)</strong> to the end of the queue and returns it.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong>\n[\"MRUQueue\", \"fetch\", \"fetch\", \"fetch\", \"fetch\"]\n[[8], [3], [5], [2], [8]]\n<strong>Output:</strong>\n[null, 3, 6, 2, 2]\n\n<strong>Explanation:</strong>\nMRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].\nmRUQueue.fetch(3); // Moves the 3<sup>rd</sup> element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.\nmRUQueue.fetch(5); // Moves the 5<sup>th</sup> element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.\nmRUQueue.fetch(2); // Moves the 2<sup>nd</sup> element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.\nmRUQueue.fetch(8); // The 8<sup>th</sup> element (2) is already at the end of the queue so just return it.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2000</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n\t<li>At most <code>2000</code> calls will be made to <code>fetch</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Finding an <code>O(n)</code> algorithm per <code>fetch</code> is a bit easy. Can you find an algorithm with a better complexity for each <code>fetch</code> call?", "relatedTopics": ["Array", "Hash Table", "Stack", "Design", "Binary Indexed Tree", "Ordered Set"], "similarQuestions": [{"questionName": "LRU Cache", "difficulty": "Medium"}], "problemName": "design-most-recently-used-queue"}